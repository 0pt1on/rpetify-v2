{"ast":null,"code":"import _toConsumableArray from \"/Users/karolis/imkarolis/rpetify-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/karolis/imkarolis/rpetify-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/karolis/imkarolis/rpetify-v2/src/components/Select.js\";\nimport React from \"react\";\nimport { Box } from \"@chakra-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nexport default function Select(_ref) {\n  var useReps = _ref.useReps,\n      useRpe = _ref.useRpe,\n      useWeights = _ref.useWeights,\n      useSets = _ref.useSets,\n      usePercentages = _ref.usePercentages,\n      customArray = _ref.customArray,\n      selected = _ref.selected,\n      name = _ref.name,\n      restProps = _objectWithoutProperties(_ref, [\"useReps\", \"useRpe\", \"useWeights\", \"useSets\", \"usePercentages\", \"customArray\", \"selected\", \"name\"]);\n\n  var units = useSelector(function (state) {\n    return state.units;\n  });\n  var repsArray = Array(12).fill(null).map(function (_, i) {\n    return {\n      value: i + 1,\n      text: i + 1\n    };\n  });\n  var rpeArray = [{\n    value: 6.5,\n    text: 6.5\n  }, {\n    value: 7,\n    text: 7\n  }, {\n    value: 7.5,\n    text: 7.5\n  }, {\n    value: 8,\n    text: 8\n  }, {\n    value: 8.5,\n    text: 8.5\n  }, {\n    value: 9,\n    text: 9\n  }, {\n    value: 9.5,\n    text: 9.5\n  }, {\n    value: 10,\n    text: 10\n  }];\n  var setsArray = [{\n    value: 1,\n    text: 1\n  }, {\n    value: 2,\n    text: 2\n  }, {\n    value: 3,\n    text: 3\n  }, {\n    value: 4,\n    text: 4\n  }, {\n    value: 5,\n    text: 5\n  }];\n\n  function getPercentages() {\n    return Array.from({\n      length: 200\n    }, function (x, i) {\n      if (i + 1 > 9) {\n        return {\n          value: i + 1,\n          text: i + 1\n        };\n      }\n\n      return null;\n    }).filter(Boolean);\n  }\n\n  var percentagesArray = getPercentages();\n\n  var getWeightsArray = function getWeightsArray() {\n    return Array(1000).fill(null).reduce(function (acc, next, i) {\n      if (units === \"lbs\" && i + 1 > 44 && ((i + 1) % 10 === 5 || (i + 1) % 10 === 0)) {\n        return [].concat(_toConsumableArray(acc), [{\n          text: i + 1,\n          value: i + 1\n        }]);\n      } else if (units === \"kg\" && i > 20) {\n        return [].concat(_toConsumableArray(acc), [{\n          text: i + 1,\n          value: Math.round((i + 1) / 0.453592)\n        }, {\n          text: i + 1.5,\n          value: Math.round((i + 1.5) / 0.453592)\n        }]);\n      }\n\n      return acc;\n    }, []);\n  };\n\n  var weightsArray = getWeightsArray();\n  var items = useReps ? repsArray : useRpe ? rpeArray : useWeights ? weightsArray : useSets ? setsArray : customArray ? customArray : usePercentages ? percentagesArray : [];\n  return React.createElement(Box, Object.assign({}, restProps, {\n    color: \"gray.800\",\n    rounded: \"md\",\n    as: \"select\",\n    name: name,\n    h: \"10\",\n    bg: \"gray.200\",\n    w: \"full\",\n    fontWeight: \"inherit\",\n    style: {\n      textAlignLast: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), items.map(function (_ref2, i) {\n    var value = _ref2.value,\n        text = _ref2.text;\n    return React.createElement(Box, {\n      key: i,\n      value: value,\n      selected: text === selected ? true : false,\n      as: \"option\",\n      w: \"full\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, text);\n  }));\n}","map":{"version":3,"sources":["/Users/karolis/imkarolis/rpetify-v2/src/components/Select.js"],"names":["React","Box","useSelector","useDispatch","Select","useReps","useRpe","useWeights","useSets","usePercentages","customArray","selected","name","restProps","units","state","repsArray","Array","fill","map","_","i","value","text","rpeArray","setsArray","getPercentages","from","length","x","filter","Boolean","percentagesArray","getWeightsArray","reduce","acc","next","Math","round","weightsArray","items","textAlignLast"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Box } from \"@chakra-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function Select({\n  useReps,\n  useRpe,\n  useWeights,\n  useSets,\n  usePercentages,\n  customArray,\n  selected,\n  name,\n  ...restProps\n}) {\n  const units = useSelector(state => state.units);\n\n  const repsArray = Array(12)\n    .fill(null)\n    .map((_, i) => ({ value: i + 1, text: i + 1 }));\n\n  const rpeArray = [\n    { value: 6.5, text: 6.5 },\n    { value: 7, text: 7 },\n    { value: 7.5, text: 7.5 },\n    { value: 8, text: 8 },\n    { value: 8.5, text: 8.5 },\n    { value: 9, text: 9 },\n    { value: 9.5, text: 9.5 },\n    { value: 10, text: 10 }\n  ];\n\n  const setsArray = [\n    { value: 1, text: 1 },\n    { value: 2, text: 2 },\n    { value: 3, text: 3 },\n    { value: 4, text: 4 },\n    { value: 5, text: 5 }\n  ];\n\n  function getPercentages() {\n    return Array.from({ length: 200 }, (x, i) => {\n      if (i + 1 > 9) {\n        return { value: i + 1, text: i + 1 };\n      }\n      return null;\n    }).filter(Boolean);\n  }\n\n  const percentagesArray = getPercentages();\n\n  const getWeightsArray = () =>\n    Array(1000)\n      .fill(null)\n      .reduce((acc, next, i) => {\n        if (\n          units === \"lbs\" &&\n          i + 1 > 44 &&\n          ((i + 1) % 10 === 5 || (i + 1) % 10 === 0)\n        ) {\n          return [...acc, { text: i + 1, value: i + 1 }];\n        } else if (units === \"kg\" && i > 20) {\n          return [\n            ...acc,\n            { text: i + 1, value: Math.round((i + 1) / 0.453592) },\n            { text: i + 1.5, value: Math.round((i + 1.5) / 0.453592) }\n          ];\n        }\n\n        return acc;\n      }, []);\n\n  const weightsArray = getWeightsArray();\n\n  const items = useReps\n    ? repsArray\n    : useRpe\n    ? rpeArray\n    : useWeights\n    ? weightsArray\n    : useSets\n    ? setsArray\n    : customArray\n    ? customArray\n    : usePercentages\n    ? percentagesArray\n    : [];\n\n  return (\n    <Box\n      {...restProps}\n      color=\"gray.800\"\n      rounded=\"md\"\n      as=\"select\"\n      name={name}\n      h=\"10\"\n      bg=\"gray.200\"\n      w=\"full\"\n      fontWeight=\"inherit\"\n      style={{ textAlignLast: \"center\" }}\n    >\n      {items.map(({ value, text }, i) => {\n        return (\n          <Box\n            key={i}\n            value={value}\n            selected={text === selected ? true : false}\n            as=\"option\"\n            w=\"full\"\n          >\n            {text}\n          </Box>\n        );\n      })}\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}