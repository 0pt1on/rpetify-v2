{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Transition } from \"react-spring/renderprops.cjs\";\nimport { ModalHeader, ModalFooter, ModalBody, ModalOverlay, ModalContent } from \"../Modal\";\nimport CloseButton from \"../CloseButton\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport { forwardRef } from \"react\";\n\nvar DrawerTransition = function DrawerTransition(_ref) {\n  var isOpen = _ref.isOpen,\n      children = _ref.children,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 200 : _ref$duration,\n      placement = _ref.placement,\n      isFullHeight = _ref.isFullHeight;\n  var placements = {\n    bottom: {\n      maxWidth: \"100%\",\n      height: isFullHeight ? \"100vh\" : \"auto\",\n      bottom: 0,\n      left: 0,\n      right: 0\n    },\n    top: {\n      maxWidth: \"100%\",\n      height: isFullHeight ? \"100vh\" : \"auto\",\n      top: 0,\n      left: 0,\n      right: 0\n    },\n    left: {\n      height: \"100vh\",\n      left: 0,\n      top: 0\n    },\n    right: {\n      right: 0,\n      top: 0,\n      height: \"100vh\"\n    }\n  };\n  var transitionOptions = {\n    bottom: {\n      offset: \"100%\",\n      transform: function transform(y) {\n        return \"translateY(\" + y + \")\";\n      }\n    },\n    top: {\n      offset: \"-100%\",\n      transform: function transform(y) {\n        return \"translateY(\" + y + \")\";\n      }\n    },\n    left: {\n      offset: \"-100%\",\n      transform: function transform(x) {\n        return \"translateX(\" + x + \")\";\n      }\n    },\n    right: {\n      offset: \"100%\",\n      transform: function transform(x) {\n        return \"translateX(\" + x + \")\";\n      }\n    }\n  };\n  var _transitionOptions$pl = transitionOptions[placement],\n      transform = _transitionOptions$pl.transform,\n      offset = _transitionOptions$pl.offset;\n  return jsx(Transition, {\n    items: isOpen,\n    from: {\n      opacity: 0,\n      offset: offset\n    },\n    enter: {\n      opacity: 1,\n      offset: \"0%\"\n    },\n    leave: {\n      opacity: 0,\n      offset: offset\n    },\n    config: {\n      duration: duration\n    }\n  }, function (isOpen) {\n    return isOpen && function (styles) {\n      return children({\n        reactSpringStyles: styles,\n        transformStyle: transform(styles.offset),\n        placementStyle: placements[placement]\n      });\n    };\n  });\n};\n\nvar DrawerCloseButton = forwardRef(function (_ref2, ref) {\n  var onClick = _ref2.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"onClick\"]);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var hoverColor = {\n    light: \"blackAlpha.100\",\n    dark: \"whiteAlpha.100\"\n  };\n  var activeColor = {\n    light: \"blackAlpha.200\",\n    dark: \"whiteAlpha.200\"\n  };\n  return jsx(CloseButton, _extends({\n    ref: ref,\n    onClick: onClick,\n    position: \"fixed\",\n    zIndex: \"1\",\n    top: \"8px\",\n    right: \"12px\",\n    _hover: {\n      bg: hoverColor[colorMode]\n    },\n    _active: {\n      bg: activeColor[colorMode]\n    }\n  }, rest));\n});\nexport { DrawerTransition, DrawerCloseButton, ModalHeader as DrawerHeader, ModalFooter as DrawerFooter, ModalBody as DrawerBody, ModalOverlay as DrawerOverlay, ModalContent as DrawerContent };","map":null,"metadata":{},"sourceType":"module"}