{"ast":null,"code":"var _jsxFileName = \"/Users/karolis/imkarolis/rpetify-v2/src/components/workout-card/WarmupContent.js\";\nimport React from \"react\";\nimport { getRoundedWeight, getPlatesOnBar, getWorksetWeight, getRoundedWeightKg } from \"utils\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box, Text, Flex, Stack, Grid, Badge, IconButton } from \"@chakra-ui/core\";\nexport default function WarmupContent(_ref) {\n  var sets = _ref.sets,\n      liftName = _ref.liftName;\n  var oneRepMax = useSelector(function (state) {\n    return state.oneRepMax;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.variants;\n  }),\n      variants = _useSelector.variants;\n\n  var warmups = useSelector(function (state) {\n    return state.warmups;\n  });\n  var units = useSelector(function (state) {\n    return state.units;\n  });\n  var warmupSets = warmups.list[warmups.current].sets; // console.log(\"liftnameFromWarmup\", liftName);\n\n  var foundOneRM = function foundOneRM() {\n    var mainOneRM = oneRepMax.find(function (_ref2) {\n      var name = _ref2.name;\n      return name === liftName;\n    });\n\n    if (mainOneRM) {\n      return mainOneRM.oneRM;\n    }\n\n    var variantOneRM = variants.find(function (_ref3) {\n      var name = _ref3.name;\n      return name === liftName;\n    });\n\n    if (variantOneRM) {\n      return variantOneRM.oneRM;\n    }\n  };\n\n  var warmupWeight = getWorksetWeight({\n    rpe: sets[0].rpe,\n    reps: sets[0].reps,\n    oneRM: foundOneRM()\n  });\n  var warmupWeightByUnit = units === \"lbs\" ? warmupWeight : Math.round(warmupWeight * 0.453592);\n  return React.createElement(Box, {\n    px: \"2\",\n    py: \"3\",\n    fontSize: \"xl\",\n    fontWeight: \"semibold\",\n    color: \"gray.200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(WarmupSetsHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), warmupSets.map(function (props, i) {\n    var weight = Math.round(warmupWeightByUnit * props.percent);\n    return React.createElement(WarmupSetRow, Object.assign({\n      key: props.id,\n      weight: weight\n    }, props, {\n      i: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }));\n}\n\nfunction Header() {\n  return React.createElement(Flex, {\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Text, {\n    fontSize: \"xs\",\n    fontWeight: \"black\",\n    textTransform: \"uppercase\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"option\"), React.createElement(Stack, {\n    isInline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"1st\"), React.createElement(Badge, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"2nd\"), React.createElement(Badge, {\n    variantColor: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"3rd\")));\n}\n\nfunction WarmupSetsHead() {\n  return React.createElement(Grid, {\n    my: \"2\",\n    fontSize: \"md\",\n    fontWeight: \"black\",\n    letterSpacing: \"wider\",\n    color: \"yellow.500\",\n    gap: 2,\n    gridTemplateColumns: \"1fr 5fr 6fr\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"NO\"), React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"1st SET %\"), React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"PLATES\"));\n}\n\nfunction WarmupSetRow(_ref4) {\n  var weight = _ref4.weight,\n      id = _ref4.id,\n      percent = _ref4.percent,\n      reps = _ref4.reps,\n      sets = _ref4.sets,\n      i = _ref4.i;\n  var units = useSelector(function (state) {\n    return state.units;\n  }); // const barbellWeight = useSelector(state => state.barbellWeight);\n\n  var barbellWeight = units === \"lbs\" ? 44 : 20;\n  var workWeightByUnit = units === \"lbs\" ? getRoundedWeight(weight) : getRoundedWeightKg(weight);\n  return React.createElement(Grid, {\n    key: id,\n    my: \"4\",\n    gap: 2,\n    gridTemplateColumns: \"1fr 5fr 6fr\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Text, {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, i + 1), React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Flex, {\n    flexDirection: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Text, {\n    fontSize: \"xs\",\n    lineHeight: \"0\",\n    fontWeight: \"bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, workWeightByUnit), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, sets, \" x \", reps, \" @\", Math.round(percent * 100), \"%\"))), React.createElement(Text, {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, getPlatesOnBar({\n    weight: weight,\n    units: units,\n    barbellWeight: barbellWeight\n  })));\n}","map":{"version":3,"sources":["/Users/karolis/imkarolis/rpetify-v2/src/components/workout-card/WarmupContent.js"],"names":["React","getRoundedWeight","getPlatesOnBar","getWorksetWeight","getRoundedWeightKg","useSelector","useDispatch","Box","Text","Flex","Stack","Grid","Badge","IconButton","WarmupContent","sets","liftName","oneRepMax","state","variants","warmups","units","warmupSets","list","current","foundOneRM","mainOneRM","find","name","oneRM","variantOneRM","warmupWeight","rpe","reps","warmupWeightByUnit","Math","round","map","props","i","weight","percent","id","Header","WarmupSetsHead","WarmupSetRow","barbellWeight","workWeightByUnit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  getRoundedWeight,\n  getPlatesOnBar,\n  getWorksetWeight,\n  getRoundedWeightKg\n} from \"utils\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Box,\n  Text,\n  Flex,\n  Stack,\n  Grid,\n  Badge,\n  IconButton\n} from \"@chakra-ui/core\";\n\nexport default function WarmupContent({ sets, liftName }) {\n  const oneRepMax = useSelector(state => state.oneRepMax);\n  const { variants } = useSelector(state => state.variants);\n  const warmups = useSelector(state => state.warmups);\n  const units = useSelector(state => state.units);\n  const warmupSets = warmups.list[warmups.current].sets;\n  // console.log(\"liftnameFromWarmup\", liftName);\n\n  const foundOneRM = () => {\n    let mainOneRM = oneRepMax.find(({ name }) => name === liftName);\n    if (mainOneRM) {\n      return mainOneRM.oneRM;\n    }\n    let variantOneRM = variants.find(({ name }) => name === liftName);\n    if (variantOneRM) {\n      return variantOneRM.oneRM;\n    }\n  };\n\n  const warmupWeight = getWorksetWeight({\n    rpe: sets[0].rpe,\n    reps: sets[0].reps,\n    oneRM: foundOneRM()\n  });\n\n  const warmupWeightByUnit =\n    units === \"lbs\" ? warmupWeight : Math.round(warmupWeight * 0.453592);\n\n  return (\n    <Box px=\"2\" py=\"3\" fontSize=\"xl\" fontWeight=\"semibold\" color=\"gray.200\">\n      {/* <Header /> */}\n      {/* <Box as=\"hr\" my=\"2\" /> */}\n      <WarmupSetsHead />\n      {warmupSets.map((props, i) => {\n        const weight = Math.round(warmupWeightByUnit * props.percent);\n        return <WarmupSetRow key={props.id} weight={weight} {...props} i={i} />;\n      })}\n    </Box>\n  );\n}\n\nfunction Header() {\n  return (\n    <Flex alignItems=\"baseline\" justifyContent=\"space-between\">\n      <Text fontSize=\"xs\" fontWeight=\"black\" textTransform=\"uppercase\">\n        option\n      </Text>\n      <Stack isInline>\n        <Badge>1st</Badge>\n        <Badge>2nd</Badge>\n        <Badge variantColor=\"red\">3rd</Badge>\n      </Stack>\n    </Flex>\n  );\n}\n\nfunction WarmupSetsHead() {\n  return (\n    <Grid\n      my=\"2\"\n      fontSize=\"md\"\n      fontWeight=\"black\"\n      letterSpacing=\"wider\"\n      color=\"yellow.500\"\n      gap={2}\n      gridTemplateColumns=\"1fr 5fr 6fr\"\n    >\n      <Text textAlign=\"center\">NO</Text>\n      <Text textAlign=\"center\">1st SET %</Text>\n      <Text textAlign=\"center\">PLATES</Text>\n    </Grid>\n  );\n}\n\nfunction WarmupSetRow({ weight, id, percent, reps, sets, i }) {\n  const units = useSelector(state => state.units);\n  // const barbellWeight = useSelector(state => state.barbellWeight);\n  const barbellWeight = units === \"lbs\" ? 44 : 20;\n\n  const workWeightByUnit =\n    units === \"lbs\" ? getRoundedWeight(weight) : getRoundedWeightKg(weight);\n\n  return (\n    <Grid key={id} my=\"4\" gap={2} gridTemplateColumns=\"1fr 5fr 6fr\">\n      <Text\n        textAlign=\"center\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        {i + 1}\n      </Text>\n      <Text textAlign=\"center\">\n        <Flex flexDirection=\"column\">\n          <Text fontSize=\"xs\" lineHeight=\"0\" fontWeight=\"bold\">\n            {workWeightByUnit}\n          </Text>\n          <Text>\n            {sets} x {reps} @{Math.round(percent * 100)}%\n          </Text>\n        </Flex>\n      </Text>\n      <Text\n        textAlign=\"center\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        {getPlatesOnBar({ weight, units, barbellWeight })}\n      </Text>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}