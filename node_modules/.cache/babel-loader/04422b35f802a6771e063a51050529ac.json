{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport Component from \"@reach/component-component\";\nimport Portal from \"@reach/portal\";\nimport { checkStyles, wrapEvent, assignRef } from \"@reach/utils\";\nimport FocusLock from \"react-focus-lock\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { func, bool } from \"prop-types\";\n\nvar createAriaHider = function createAriaHider(dialogNode) {\n  var originalValues = [];\n  var rootNodes = [];\n  Array.prototype.forEach.call(document.querySelectorAll(\"body > *\"), function (node) {\n    var portalNode = dialogNode.parentNode.parentNode.parentNode;\n\n    if (node === portalNode) {\n      return;\n    }\n\n    var attr = node.getAttribute(\"aria-hidden\");\n    var alreadyHidden = attr !== null && attr !== \"false\";\n\n    if (alreadyHidden) {\n      return;\n    }\n\n    originalValues.push(attr);\n    rootNodes.push(node);\n    node.setAttribute(\"aria-hidden\", \"true\");\n  });\n  return function () {\n    rootNodes.forEach(function (node, index) {\n      var originalValue = originalValues[index];\n\n      if (originalValue === null) {\n        node.removeAttribute(\"aria-hidden\");\n      } else {\n        node.setAttribute(\"aria-hidden\", originalValue);\n      }\n    });\n  };\n};\n\nvar k = function k() {};\n\nvar checkDialogStyles = function checkDialogStyles() {\n  return checkStyles(\"dialog\");\n};\n\nvar portalDidMount = function portalDidMount(refs) {\n  refs.disposeAriaHider = createAriaHider(refs.overlayNode);\n};\n\nvar contentWillUnmount = function contentWillUnmount(_ref) {\n  var refs = _ref.refs;\n  refs.disposeAriaHider();\n};\n\nvar FocusContext = React.createContext();\nvar DialogOverlay = React.forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$isOpen = _ref2.isOpen,\n      isOpen = _ref2$isOpen === undefined ? true : _ref2$isOpen,\n      _ref2$onDismiss = _ref2.onDismiss,\n      onDismiss = _ref2$onDismiss === undefined ? k : _ref2$onDismiss,\n      initialFocusRef = _ref2.initialFocusRef,\n      onClick = _ref2.onClick,\n      onKeyDown = _ref2.onKeyDown,\n      props = _objectWithoutProperties(_ref2, [\"isOpen\", \"onDismiss\", \"initialFocusRef\", \"onClick\", \"onKeyDown\"]);\n\n  return React.createElement(Component, {\n    didMount: checkDialogStyles\n  }, isOpen ? React.createElement(Portal, {\n    \"data-reach-dialog-wrapper\": true\n  }, React.createElement(Component, {\n    refs: {\n      overlayNode: null\n    },\n    didMount: function didMount(_ref3) {\n      var refs = _ref3.refs;\n      portalDidMount(refs);\n    },\n    willUnmount: contentWillUnmount\n  }, function (_ref4) {\n    var refs = _ref4.refs;\n    return React.createElement(FocusLock, {\n      returnFocus: true,\n      onActivation: function onActivation() {\n        if (initialFocusRef) {\n          initialFocusRef.current.focus();\n        }\n      }\n    }, React.createElement(RemoveScroll, null, React.createElement(\"div\", _extends({\n      \"data-reach-dialog-overlay\": true,\n      onClick: wrapEvent(onClick, function (event) {\n        event.stopPropagation();\n        onDismiss();\n      }),\n      onKeyDown: wrapEvent(onKeyDown, function (event) {\n        if (event.key === \"Escape\") {\n          event.stopPropagation();\n          onDismiss();\n        }\n      }),\n      ref: function ref(node) {\n        refs.overlayNode = node;\n        assignRef(forwardedRef, node);\n      }\n    }, props))));\n  })) : null);\n});\nDialogOverlay.propTypes = {\n  initialFocusRef: function initialFocusRef() {}\n};\n\nvar stopPropagation = function stopPropagation(event) {\n  return event.stopPropagation();\n};\n\nvar DialogContent = React.forwardRef(function (_ref5, forwardedRef) {\n  var onClick = _ref5.onClick,\n      onKeyDown = _ref5.onKeyDown,\n      props = _objectWithoutProperties(_ref5, [\"onClick\", \"onKeyDown\"]);\n\n  return React.createElement(\"div\", _extends({\n    \"aria-modal\": \"true\",\n    \"data-reach-dialog-content\": true,\n    tabIndex: \"-1\",\n    onClick: wrapEvent(onClick, stopPropagation),\n    ref: function ref(node) {\n      assignRef(forwardedRef, node);\n    }\n  }, props));\n});\n\nvar Dialog = function Dialog(_ref6) {\n  var isOpen = _ref6.isOpen,\n      _ref6$onDismiss = _ref6.onDismiss,\n      onDismiss = _ref6$onDismiss === undefined ? k : _ref6$onDismiss,\n      initialFocusRef = _ref6.initialFocusRef,\n      props = _objectWithoutProperties(_ref6, [\"isOpen\", \"onDismiss\", \"initialFocusRef\"]);\n\n  return React.createElement(DialogOverlay, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    initialFocusRef: initialFocusRef\n  }, React.createElement(DialogContent, props));\n};\n\nprocess.env.NODE_ENV !== \"production\" ? Dialog.propTypes = {\n  isOpen: bool,\n  onDismiss: func\n} : void 0;\nexport { DialogOverlay, DialogContent, Dialog };","map":null,"metadata":{},"sourceType":"module"}