{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useTheme } from \"../ThemeProvider\";\nimport { useColorMode } from \"../ColorModeProvider\";\n\nvar outlinedStyle = function outlinedStyle(_ref) {\n  var _ref$focusBorderColor = _ref.focusBorderColor,\n      focusBorderColor = _ref$focusBorderColor === void 0 ? \"blue\" : _ref$focusBorderColor,\n      colors = _ref.theme.colors,\n      colorMode = _ref.colorMode;\n  var bg = {\n    light: \"white\",\n    dark: \"whiteAlpha.100\"\n  };\n  var borderColor = {\n    light: \"inherit\",\n    dark: \"whiteAlpha.50\"\n  };\n  var hoverColor = {\n    light: \"gray.300\",\n    dark: \"whiteAlpha.200\"\n  };\n  var boxShadow = colors[focusBorderColor] && colors[focusBorderColor][500];\n  var invalidColor = {\n    light: \"red.500\",\n    dark: \"red.300\"\n  };\n  var invalidBoxShadow = {\n    light: colors.red[500],\n    dark: colors.red[300]\n  };\n  return _objectSpread({}, readOnly, {\n    border: \"1px\",\n    borderColor: borderColor[colorMode],\n    bg: bg[colorMode],\n    _hover: {\n      borderColor: hoverColor[colorMode]\n    },\n    _disabled: {\n      opacity: \"0.4\",\n      cursor: \"not-allowed\"\n    },\n    _focus: {\n      borderColor: focusBorderColor + \".500\",\n      boxShadow: \"0 0 0 1px \" + boxShadow\n    },\n    _invalid: {\n      borderColor: invalidColor[colorMode],\n      boxShadow: \"0 0 0 1px \" + invalidBoxShadow[colorMode]\n    }\n  });\n};\n\nvar readOnly = {\n  _readOnly: {\n    bg: \"transparent\",\n    boxShadow: \"none !important\",\n    userSelect: \"all\"\n  }\n};\n\nvar filledStyle = function filledStyle(_ref2) {\n  var focusBorderColor = _ref2.focusBorderColor,\n      colorMode = _ref2.colorMode;\n  var bg = {\n    light: \"gray.100\",\n    dark: \"whiteAlpha.50\"\n  };\n  var hoverColor = {\n    light: \"gray.200\",\n    dark: \"whiteAlpha.100\"\n  };\n  var invalidColor = {\n    light: \"red.500\",\n    dark: \"red.300\"\n  };\n  var focusColor = {\n    light: focusBorderColor + \".500\",\n    dark: focusBorderColor + \".300\"\n  };\n  return _objectSpread({}, readOnly, {\n    border: \"2px\",\n    borderColor: \"transparent\",\n    bg: bg[colorMode],\n    _hover: {\n      bg: hoverColor[colorMode]\n    },\n    _disabled: {\n      opacity: \"0.4\",\n      cursor: \"not-allowed\"\n    },\n    _focus: {\n      bg: \"transparent\",\n      borderColor: focusColor[colorMode]\n    },\n    _invalid: {\n      borderColor: invalidColor[colorMode]\n    }\n  });\n};\n\nvar flushedStyle = function flushedStyle(_ref3) {\n  var colorMode = _ref3.colorMode;\n  var focusColor = {\n    light: \"blue.500\",\n    dark: \"blue.300\"\n  };\n  var errorColor = {\n    light: \"red.500\",\n    dark: \"red.300\"\n  };\n  return _objectSpread({}, readOnly, {\n    borderBottom: \"2px\",\n    borderColor: \"inherit\",\n    rounded: 0,\n    px: undefined,\n    bg: \"transparent\",\n    _focus: {\n      borderColor: focusColor[colorMode]\n    },\n    _invalid: {\n      borderColor: errorColor[colorMode]\n    }\n  });\n};\n\nvar unstyledStyle = {\n  bg: \"transparent\",\n  px: undefined,\n  height: undefined\n};\n\nvar variantProps = function variantProps(props) {\n  switch (props.variant) {\n    case \"flushed\":\n      return flushedStyle(props);\n\n    case \"unstyled\":\n      return unstyledStyle;\n\n    case \"filled\":\n      return filledStyle(props);\n\n    case \"outline\":\n      return outlinedStyle(props);\n\n    default:\n      return {};\n  }\n};\n\nvar baseProps = {\n  display: \"flex\",\n  alignItems: \"center\",\n  position: \"relative\",\n  transition: \"all 0.2s\",\n  outline: \"none\"\n};\nexport var inputSizes = {\n  lg: {\n    fontSize: \"lg\",\n    px: 4,\n    height: 12,\n    lineHeight: \"3rem\",\n    rounded: \"md\"\n  },\n  md: {\n    fontSize: \"md\",\n    px: 4,\n    height: 10,\n    lineHeight: \"2.5rem\",\n    rounded: \"md\"\n  },\n  sm: {\n    fontSize: \"sm\",\n    px: 3,\n    height: 8,\n    lineHeight: \"2rem\",\n    rounded: \"sm\"\n  }\n};\n\nvar sizeProps = function sizeProps(props) {\n  return inputSizes[props.size];\n};\n\nvar useInputStyle = function useInputStyle(props) {\n  var theme = useTheme();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _props = _objectSpread({}, props, {\n    theme: theme,\n    colorMode: colorMode\n  });\n\n  return _objectSpread({\n    width: props.isFullWidth ? \"100%\" : undefined\n  }, baseProps, {}, sizeProps(_props), {}, variantProps(_props));\n};\n\nexport default useInputStyle;","map":null,"metadata":{},"sourceType":"module"}