{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Children, cloneElement } from \"react\";\nimport Flex from \"../Flex\";\nimport Box from \"../Box\";\n\nvar Stack = function Stack(_ref) {\n  var isInline = _ref.isInline,\n      children = _ref.children,\n      align = _ref.align,\n      justify = _ref.justify,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,\n      shouldWrapChildren = _ref.shouldWrapChildren,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isInline\", \"children\", \"align\", \"justify\", \"spacing\", \"shouldWrapChildren\"]);\n\n  return jsx(Flex, _extends({\n    align: align,\n    justify: justify,\n    flexDir: isInline ? \"row\" : \"column\"\n  }, rest), Children.map(children, function (child, index) {\n    var isLastChild = children.length === index + 1;\n    var spacingProps = isInline ? {\n      mr: isLastChild ? null : spacing\n    } : {\n      mb: isLastChild ? null : spacing\n    };\n\n    if (shouldWrapChildren) {\n      return jsx(Box, _extends({\n        d: \"inline-block\"\n      }, spacingProps), child);\n    }\n\n    return cloneElement(child, spacingProps);\n  }));\n};\n\nexport default Stack;","map":null,"metadata":{},"sourceType":"module"}