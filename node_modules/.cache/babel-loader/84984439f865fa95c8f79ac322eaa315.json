{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport propTypes from \"prop-types\";\nimport { forwardRef } from \"react\";\nimport Icon from \"../Icon\";\nimport Spinner from \"../Spinner\";\nimport useButtonStyle from \"./styles\";\nimport PseudoBox from \"../PseudoBox\";\nimport Box from \"../Box\";\n\nvar ButtonIcon = function ButtonIcon(_ref) {\n  var icon = _ref.icon,\n      props = _objectWithoutPropertiesLoose(_ref, [\"icon\"]);\n\n  if (typeof icon === \"string\") {\n    return jsx(Icon, _extends({\n      focusable: \"false\",\n      name: icon,\n      color: \"currentColor\"\n    }, props));\n  }\n\n  return jsx(Box, _extends({\n    as: icon,\n    \"data-custom-icon\": true,\n    focusable: \"false\",\n    color: \"currentColor\"\n  }, props));\n};\n\nvar Button = forwardRef(function (_ref2, ref) {\n  var isDisabled = _ref2.isDisabled,\n      isLoading = _ref2.isLoading,\n      isActive = _ref2.isActive,\n      isFullWidth = _ref2.isFullWidth,\n      children = _ref2.children,\n      Comp = _ref2.as,\n      variantColor = _ref2.variantColor,\n      leftIcon = _ref2.leftIcon,\n      rightIcon = _ref2.rightIcon,\n      variant = _ref2.variant,\n      loadingText = _ref2.loadingText,\n      iconSpacing = _ref2.iconSpacing,\n      type = _ref2.type,\n      size = _ref2.size,\n      colorMode = _ref2.colorMode,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"as\", \"variantColor\", \"leftIcon\", \"rightIcon\", \"variant\", \"loadingText\", \"iconSpacing\", \"type\", \"size\", \"colorMode\"]);\n\n  var buttonStyleProps = useButtonStyle({\n    color: variantColor,\n    variant: variant,\n    size: size,\n    colorMode: colorMode\n  });\n\n  var _isDisabled = isDisabled || isLoading;\n\n  return jsx(PseudoBox, _extends({\n    disabled: _isDisabled,\n    \"aria-disabled\": _isDisabled,\n    ref: ref,\n    as: Comp,\n    type: type,\n    borderRadius: \"md\",\n    fontWeight: \"semibold\",\n    width: isFullWidth ? \"full\" : undefined,\n    \"data-active\": isActive ? \"true\" : undefined\n  }, buttonStyleProps, rest), leftIcon && !isLoading && jsx(ButtonIcon, {\n    ml: -1,\n    mr: iconSpacing,\n    icon: leftIcon\n  }), isLoading && jsx(Spinner, {\n    position: loadingText ? \"relative\" : \"absolute\",\n    mr: loadingText ? iconSpacing : 0,\n    color: \"currentColor\",\n    size: \"1em\"\n  }), isLoading ? loadingText || jsx(Box, {\n    as: \"span\",\n    opacity: \"0\"\n  }, children) : children, rightIcon && !isLoading && jsx(ButtonIcon, {\n    mr: -1,\n    ml: iconSpacing,\n    icon: rightIcon\n  }));\n});\nButton.defaultProps = {\n  variantColor: \"gray\",\n  variant: \"solid\",\n  size: \"md\",\n  type: \"button\",\n  iconSpacing: 2,\n  as: \"button\"\n};\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes = {\n  /**\n   * The color of the button. Use the colors passed in `theme.colors`.\n   */\n  variantColor: propTypes.string,\n\n  /**\n   * The variant of the button style to use.\n   */\n  variant: propTypes.oneOf([\"outline\", \"ghost\", \"unstyled\", \"link\", \"solid\"]),\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled: propTypes.bool,\n\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading: propTypes.bool,\n\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText: propTypes.string,\n\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth: propTypes.bool,\n\n  /**\n   * The html button type to use.\n   */\n  type: propTypes.oneOf([\"button\", \"reset\", \"submit\"]),\n\n  /**\n   * The size of the button. Use the sizes in `theme.sizes.button`\n   */\n  size: propTypes.oneOf([\"xs\", \"sm\", \"md\", \"lg\"]),\n\n  /**\n   * The content of the button.\n   */\n  children: propTypes.node.isRequired,\n\n  /**\n   * If added, the button will show an icon before the button's label.\n   * Use the icon key in `theme.icons`\n   */\n  leftIcon: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),\n\n  /**\n   * If added, the button will show an icon after the button's label.\n   * Use the icon key in `theme.icons`\n   */\n  rightIcon: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),\n\n  /**\n   * The space between the button icon and label.\n   */\n  iconSpacing: propTypes.oneOfType([propTypes.number, propTypes.string])\n} : void 0;\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}