{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { RemoveScrollBar, fullWidthClassName, zeroRightClassName } from 'react-remove-scroll-bar';\nimport { handleScroll } from \"./handleScroll\";\nimport { aggressive } from './aggresiveCapture';\nexport var getTouchY = function getTouchY(event) {\n  return event.changedTouches ? event.changedTouches[0].clientY : 0;\n};\nvar classNames = {\n  fullWidth: fullWidthClassName,\n  zeroRight: zeroRightClassName\n};\n\nvar extractRef = function extractRef(ref) {\n  return ref && 'current' in ref ? ref.current : ref;\n};\n\nvar RemoveScroll = function (_super) {\n  tslib_1.__extends(RemoveScroll, _super);\n\n  function RemoveScroll() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.shouldPreventQueue = [];\n    _this.touchStart = 0;\n    _this.ref = React.createRef();\n\n    _this.shouldPrevent = function (event) {\n      var stack = RemoveScroll.stack.filter(function (el) {\n        return el.props.enabled;\n      });\n\n      if (!stack.length || stack[stack.length - 1] !== _this) {\n        return;\n      }\n\n      var delta = event.deltaY || getTouchY(event);\n\n      var sourceEvent = _this.shouldPreventQueue.filter(function (e) {\n        return e.name === event.type && e.delta === delta && e.target === event.target;\n      })[0];\n\n      if (sourceEvent && sourceEvent.should) {\n        event.preventDefault();\n        return;\n      }\n\n      if (!sourceEvent) {\n        var shardNodes = (_this.props.shards || []).map(extractRef).filter(Boolean).filter(function (node) {\n          return node.contains(event.target);\n        });\n        var shouldStop = shardNodes.length > 0 ? _this.shouldCancelEvent(event, shardNodes[0]) : !_this.props.noIsolation;\n\n        if (shouldStop) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    _this.shouldCancel = function (name, delta, target, should) {\n      var event = {\n        name: name,\n        delta: delta,\n        target: target,\n        should: should\n      };\n\n      _this.shouldPreventQueue.push(event);\n\n      setTimeout(function () {\n        _this.shouldPreventQueue = _this.shouldPreventQueue.filter(function (e) {\n          return e !== event;\n        });\n      }, 1);\n    };\n\n    _this.scrollTouchStart = function (event) {\n      _this.touchStart = getTouchY(event);\n    };\n\n    _this.scrollWheel = function (event) {\n      _this.shouldCancel(event.type, event.deltaY, event.target, _this.shouldCancelEvent(event, _this.ref.current));\n    };\n\n    _this.scrollTouchMove = function (event) {\n      _this.shouldCancel(event.type, getTouchY(event), event.target, _this.shouldCancelEvent(event, _this.ref.current));\n    };\n\n    return _this;\n  }\n\n  RemoveScroll.prototype.componentDidMount = function () {\n    RemoveScroll.stack.push(this);\n    this.componentDidUpdate({\n      enabled: false\n    });\n  };\n\n  RemoveScroll.prototype.componentWillUnmount = function () {\n    var _this = this;\n\n    RemoveScroll.stack = RemoveScroll.stack.filter(function (inst) {\n      return inst !== _this;\n    });\n    this.disable();\n  };\n\n  RemoveScroll.prototype.componentDidUpdate = function (oldProps) {\n    if (oldProps.enabled !== this.props.enabled) {\n      if (this.props.enabled) {\n        this.enable();\n      } else {\n        this.disable();\n      }\n    }\n  };\n\n  RemoveScroll.prototype.enable = function () {\n    if (typeof document !== 'undefined') {\n      document.addEventListener('wheel', this.shouldPrevent, aggressive);\n      document.addEventListener('touchmove', this.shouldPrevent, aggressive);\n      document.addEventListener('touchstart', this.scrollTouchStart, aggressive);\n    }\n  };\n\n  RemoveScroll.prototype.disable = function () {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('wheel', this.shouldPrevent, aggressive);\n      document.removeEventListener('touchmove', this.shouldPrevent, aggressive);\n      document.removeEventListener('touchstart', this.scrollTouchStart, aggressive);\n    }\n  };\n\n  RemoveScroll.prototype.shouldCancelEvent = function (event, parent) {\n    switch (event.type) {\n      case 'wheel':\n      case 'scroll':\n        return handleScroll(parent, event, event.deltaY);\n\n      case 'touchmove':\n        return handleScroll(parent, event, this.touchStart - getTouchY(event));\n    }\n\n    return false;\n  };\n\n  ;\n\n  RemoveScroll.prototype.render = function () {\n    var _a = this.props,\n        forwardProps = _a.forwardProps,\n        children = _a.children,\n        className = _a.className,\n        removeScrollBar = _a.removeScrollBar,\n        enabled = _a.enabled;\n    var props = {\n      ref: this.ref,\n      onScrollCapture: this.scrollWheel,\n      onWheelCapture: this.scrollWheel,\n      onTouchMoveCapture: this.scrollTouchMove\n    };\n    return React.createElement(React.Fragment, null, removeScrollBar && enabled && React.createElement(RemoveScrollBar, {\n      gapMode: \"margin\"\n    }), forwardProps ? React.cloneElement(React.Children.only(children), props) : React.createElement(\"div\", tslib_1.__assign({}, props, {\n      className: className\n    }), children));\n  };\n\n  RemoveScroll.classNames = classNames;\n  RemoveScroll.defaultProps = {\n    enabled: true,\n    removeScrollBar: true\n  };\n  RemoveScroll.stack = [];\n  return RemoveScroll;\n}(React.Component);\n\nexport { RemoveScroll };","map":null,"metadata":{},"sourceType":"module"}