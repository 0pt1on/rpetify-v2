{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { styleSinglentone } from 'react-style-singleton';\nimport { getGapWidth, zeroGap } from './utils';\nimport { fullWidthClassName, zeroRightClassName, noScrollbarsClassName } from \"./constants\";\n;\nvar Style = styleSinglentone();\n\nvar getStyles = function getStyles(_a, allowRelative, gapMode, important) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      gap = _a.gap;\n\n  if (gapMode === void 0) {\n    gapMode = 'margin';\n  }\n\n  return \"\\n  .\" + noScrollbarsClassName + \" {\\n   overflow: hidden \" + important + \";\\n   padding-right: \" + gap + \"px \" + important + \";\\n  }\\n  body {\\n    overflow: hidden \" + important + \";\\n    \" + [allowRelative && \"position: relative \" + important + \";\", gapMode === 'margin' && \"\\n    padding-left: \" + left + \"px;\\n    padding-top: \" + top + \"px;\\n    padding-right: \" + right + \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \" + gap + \"px \" + important + \";\\n    \", gapMode === 'padding' && \"padding-right: \" + gap + \"px \" + important + \";\"].filter(Boolean).join('') + \"\\n  }\\n  \\n  .\" + zeroRightClassName + \" {\\n    right: \" + gap + \"px \" + important + \";\\n  }\\n  \\n  .\" + fullWidthClassName + \" {\\n    margin-right: \" + gap + \"px \" + important + \";\\n  }\\n  \\n  .\" + zeroRightClassName + \" .\" + zeroRightClassName + \" {\\n    right: 0 \" + important + \";\\n  }\\n  \\n  .\" + fullWidthClassName + \" .\" + fullWidthClassName + \" {\\n    margin-right: 0 \" + important + \";\\n  }\\n\";\n};\n\nvar RemoveScrollBar = function (_super) {\n  tslib_1.__extends(RemoveScrollBar, _super);\n\n  function RemoveScrollBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      gap: getGapWidth(_this.props.gapMode)\n    };\n\n    _this.onResize = function () {\n      _this.forceUpdate();\n\n      if (_this.state.gap && _this.props.dynamic) {\n        if (window.innerHeight > document.body.offsetHeight) {\n          _this.setGap(zeroGap);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  RemoveScrollBar.prototype.componentDidMount = function () {\n    var gap = getGapWidth(this.props.gapMode);\n\n    if (gap !== this.state.gap) {\n      this.setGap(gap);\n    }\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n\n  RemoveScrollBar.prototype.componentWillUnmount = function () {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n\n  RemoveScrollBar.prototype.componentDidUpdate = function () {\n    if (!this.state.gap) {\n      var gap = getGapWidth(this.props.gapMode);\n\n      if (gap !== this.state.gap) {\n        this.setGap(gap);\n      }\n    }\n  };\n\n  RemoveScrollBar.prototype.setGap = function (gap) {\n    this.setState({\n      gap: gap\n    });\n  };\n\n  RemoveScrollBar.prototype.render = function () {\n    var _a = this.props,\n        noRelative = _a.noRelative,\n        noImportant = _a.noImportant,\n        _b = _a.gapMode,\n        gapMode = _b === void 0 ? 'margin' : _b;\n    var gap = this.state.gap;\n    return React.createElement(Style, {\n      styles: getStyles(gap, !noRelative, gapMode, !noImportant ? \"!important\" : '')\n    });\n  };\n\n  return RemoveScrollBar;\n}(React.Component);\n\nexport { RemoveScrollBar };","map":null,"metadata":{},"sourceType":"module"}