{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React, { forwardRef, useRef, useState, useEffect, useCallback } from \"react\";\nimport Flex from \"../Flex\";\nimport Input from \"../Input\";\nimport Spinner from \"./Spinner\";\n\nfunction useLongPress(callback, speed) {\n  if (callback === void 0) {\n    callback = function callback() {};\n  }\n\n  if (speed === void 0) {\n    speed = 200;\n  }\n\n  var _useState = useState(false),\n      startLongPress = _useState[0],\n      setStartLongPress = _useState[1];\n\n  useEffect(function () {\n    var timerId;\n\n    if (startLongPress) {\n      timerId = setTimeout(callback, speed);\n    } else {\n      clearTimeout(timerId);\n    }\n\n    return function () {\n      clearTimeout(timerId);\n    };\n  }, [startLongPress, callback, speed]);\n  var start = useCallback(function () {\n    setStartLongPress(true);\n  }, []);\n  var stop = useCallback(function () {\n    setStartLongPress(false);\n  }, []);\n  return {\n    start: start,\n    stop: stop\n  };\n}\n\nvar NumberInput = forwardRef(function (_ref2, ref) {\n  var size = _ref2.size,\n      form = _ref2.form,\n      pattern = _ref2.pattern,\n      name = _ref2.name,\n      placeholder = _ref2.placeholder,\n      onBlur = _ref2.onBlur,\n      onChange = _ref2.onChange,\n      onKeyDown = _ref2.onKeyDown,\n      onKeyUp = _ref2.onKeyUp,\n      onKeyPress = _ref2.onKeyPress,\n      onFocus = _ref2.onFocus,\n      id = _ref2.id,\n      autoFocus = _ref2.autoFocus,\n      variant = _ref2.variant,\n      ariaLabel = _ref2[\"aria-label\"],\n      ariaDescribedby = _ref2[\"aria-describedby\"],\n      ariaLabelledby = _ref2[\"aria-labelledby\"],\n      min = _ref2.min,\n      max = _ref2.max,\n      _ref2$step = _ref2.step,\n      step = _ref2$step === void 0 ? 1 : _ref2$step,\n      defaultValue = _ref2.defaultValue,\n      valueProp = _ref2.value,\n      isReadOnly = _ref2.isReadOnly,\n      isFullWidth = _ref2.isFullWidth,\n      isDisabled = _ref2.isDisabled,\n      isInvalid = _ref2.isInvalid,\n      isRequired = _ref2.isRequired,\n      focusBorderColor = _ref2.focusBorderColor,\n      inputProps = _ref2.inputProps,\n      _ref2$focusOnUpDown = _ref2.focusOnUpDown,\n      focusOnUpDown = _ref2$focusOnUpDown === void 0 ? true : _ref2$focusOnUpDown,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"size\", \"form\", \"pattern\", \"name\", \"placeholder\", \"onBlur\", \"onChange\", \"onKeyDown\", \"onKeyUp\", \"onKeyPress\", \"onFocus\", \"id\", \"autoFocus\", \"variant\", \"aria-label\", \"aria-describedby\", \"aria-labelledby\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"isReadOnly\", \"isFullWidth\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"focusBorderColor\", \"inputProps\", \"focusOnUpDown\"]);\n\n  var _useState2 = useState(defaultValue || 0),\n      val = _useState2[0],\n      setVal = _useState2[1];\n\n  var _useRef = useRef(valueProp != null),\n      isControlled = _useRef.current;\n\n  var _value = isControlled ? valueProp : val;\n\n  var isEditable = !isReadOnly && !isDisabled;\n  var ownRef = useRef();\n\n  var _ref = ref || ownRef;\n\n  var clampValue = function clampValue(nextVal) {\n    var output = nextVal;\n\n    if (nextVal > max) {\n      output = nextVal;\n    }\n\n    if (nextVal < min) {\n      output = min;\n    }\n\n    return output;\n  };\n\n  var focusInput = function focusInput() {\n    if (focusOnUpDown && _ref.current) {\n      _ref.current.focus();\n    }\n  };\n\n  var updateValue = function updateValue(value) {\n    !isControlled && setVal(value);\n    onChange && onChange(value);\n  };\n\n  var handleIncrement = function handleIncrement(unitStep) {\n    if (unitStep === void 0) {\n      unitStep = step;\n    }\n\n    var nextValue = Math.round((_value + unitStep) * 1e12) / 1e12;\n    nextValue = clampValue(nextValue);\n    var maxExists = max != null;\n\n    if (!maxExists || maxExists && max >= nextValue) {\n      updateValue(nextValue);\n    }\n\n    focusInput();\n  };\n\n  var handleDecrement = function handleDecrement(unitStep) {\n    if (unitStep === void 0) {\n      unitStep = step;\n    }\n\n    var nextValue = Math.round((_value - unitStep) * 1e12) / 1e12;\n    nextValue = clampValue(nextValue);\n    var minExists = min != null;\n\n    if (!minExists || minExists && min <= nextValue) {\n      updateValue(nextValue);\n    }\n\n    focusInput();\n  };\n\n  var handleChange = function handleChange(event) {\n    var nextValue = Number(event.target.value);\n    updateValue(nextValue);\n  };\n\n  var getIncrementFactor = function getIncrementFactor(event) {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (!isEditable) {\n      return;\n    }\n\n    if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      var ratio = getIncrementFactor(event);\n      handleIncrement(ratio * step);\n    }\n\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n\n      var _ratio = getIncrementFactor(event);\n\n      handleDecrement(_ratio * step);\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var iconSize = size === \"sm\" ? \"11px\" : \"15px\";\n  var increment = useLongPress(handleIncrement);\n  var decrement = useLongPress(handleDecrement);\n  return React.createElement(Flex, _extends({\n    align: \"stretch\",\n    w: isFullWidth ? \"full\" : null,\n    pos: \"relative\"\n  }, rest), React.createElement(Input, _extends({\n    ref: _ref,\n    size: size,\n    type: \"number\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": _value,\n    onChange: handleChange,\n    value: _value,\n    onKeyDown: handleKeyDown\n  }, {\n    form: form,\n    pattern: pattern,\n    min: min,\n    placeholder: placeholder,\n    onKeyUp: onKeyUp,\n    onKeyPress: onKeyPress,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    autoFocus: autoFocus,\n    max: max,\n    step: step,\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isRequired: isRequired,\n    name: name,\n    id: id,\n    isReadOnly: isReadOnly,\n    focusBorderColor: focusBorderColor,\n    variant: variant,\n    \"aria-label\": ariaLabel,\n    \"aria-describedby\": ariaDescribedby\n  }, inputProps)), React.createElement(Spinner, {\n    incrementProps: {\n      onMouseDown: increment.start,\n      onMouseUp: increment.stop,\n      onMouseLeave: increment.stop,\n      onTouchStart: increment.start,\n      onTouchEnd: increment.stop,\n      onClick: function onClick() {\n        return handleIncrement();\n      },\n      isDisabled: !isEditable\n    },\n    decrementProps: {\n      onMouseDown: decrement.start,\n      onMouseUp: decrement.stop,\n      onMouseLeave: decrement.stop,\n      onTouchStart: decrement.start,\n      onTouchEnd: decrement.stop,\n      onClick: function onClick() {\n        return handleDecrement();\n      },\n      isDisabled: !isEditable\n    },\n    iconSize: iconSize\n  }));\n});\nexport default NumberInput;","map":null,"metadata":{},"sourceType":"module"}