{"ast":null,"code":"export function genId(prefix) {\n  return prefix + \"-\" + Math.random().toString(32).substr(2, 8);\n}\nexport var makeId = function makeId(id, index) {\n  return id + \":\" + index;\n};\nexport var assignRef = function assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (error) {\n      throw new Error(\"Cannot assign value \\\"\" + value + \"\\\" to ref \\\"\" + ref + \"\\\"\");\n    }\n  }\n};\nexport var mergeRefs = function mergeRefs(refs, value) {\n  refs.forEach(function (ref) {\n    return assignRef(ref, value);\n  });\n};\nvar focusableElList = [\"a[href]\", \"area[href]\", \"button:not([disabled])\", \"embed\", \"iframe\", \"input:not([disabled])\", \"object\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"*[tabindex]:not([aria-disabled])\", \"*[contenteditable]\"];\nvar focusableElSelector = focusableElList.join();\nexport function getFocusables(element, keyboardOnly) {\n  if (keyboardOnly === void 0) {\n    keyboardOnly = false;\n  }\n\n  var focusableEls = Array.from(element.querySelectorAll(focusableElSelector)); // filter out elements with display: none\n\n  focusableEls = focusableEls.filter(function (focusableEl) {\n    return window.getComputedStyle(focusableEl).display !== \"none\";\n  });\n\n  if (keyboardOnly === true) {\n    focusableEls = focusableEls.filter(function (focusableEl) {\n      return focusableEl.getAttribute(\"tabindex\") !== \"-1\";\n    });\n  }\n\n  return focusableEls;\n} /// Evaluate color in theme object\n\nvar colorKeyInTheme = function colorKeyInTheme(theme, color) {\n  return color in theme.colors;\n};\n\nvar colorHueValue = function colorHueValue(theme, color) {\n  var hasDot = color.search(\".\") !== -1;\n\n  if (hasDot) {\n    var _color$split = color.split(\".\"),\n        colorName = _color$split[0],\n        hue = _color$split[1];\n\n    if (colorKeyInTheme(theme, colorName)) {\n      return theme.colors[colorName][hue];\n    }\n  }\n\n  return null;\n};\n\nexport var getColorInTheme = function getColorInTheme(theme, color) {\n  if (colorKeyInTheme(theme, color)) {\n    return theme.colors[color][500];\n  }\n\n  if (colorHueValue(theme, color)) {\n    return colorHueValue(theme, color);\n  }\n\n  return color;\n};","map":null,"metadata":{},"sourceType":"module"}