{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Children, cloneElement, useState, useRef, forwardRef } from \"react\";\nimport { useId } from \"@reach/auto-id\";\nimport Box from \"../Box\";\n/* \n  TODO:\n  - Calling focus() on the radiogroup should focus on the selected option or first enabled option\n*/\n\nvar RadioGroup = forwardRef(function (_ref, ref) {\n  var onChange = _ref.onChange,\n      name = _ref.name,\n      color = _ref.color,\n      size = _ref.size,\n      defaultValue = _ref.defaultValue,\n      isInline = _ref.isInline,\n      valueProp = _ref.value,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"name\", \"color\", \"size\", \"defaultValue\", \"isInline\", \"value\", \"spacing\", \"children\"]);\n\n  var _useRef = useRef(valueProp != null),\n      isControlled = _useRef.current;\n\n  var _useState = useState(defaultValue || null),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _value = isControlled ? valueProp : value;\n\n  var _onChange = function _onChange(event) {\n    var _val = event.target.value;\n    !isControlled && setValue(_val);\n    onChange && onChange(event, _val);\n  }; // If no name is passed, we'll generate a random, unique name\n\n\n  var fallbackName = \"radio-\" + useId();\n\n  var _name = name || fallbackName;\n\n  var clones = Children.map(children, function (child, index) {\n    var isLastRadio = children.length === index + 1;\n    var spacingProps = isInline ? {\n      mr: spacing\n    } : {\n      mb: spacing\n    };\n    return jsx(Box, _extends({\n      display: isInline ? \"inline-block\" : \"block\"\n    }, !isLastRadio && spacingProps), cloneElement(child, {\n      size: child.props.size || size,\n      color: child.props.color || color,\n      name: _name,\n      onChange: _onChange,\n      isChecked: child.props.value === _value\n    }));\n  });\n  return jsx(Box, _extends({\n    role: \"radiogroup\"\n  }, rest), clones);\n});\nexport default RadioGroup;","map":null,"metadata":{},"sourceType":"module"}