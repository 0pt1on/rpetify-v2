{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { forwardRef, useRef, useState, useCallback, createContext, useContext } from \"react\";\nimport Box from \"../Box\";\nimport useSliderStyle from \"./styles\";\nimport PseudoBox from \"../PseudoBox\";\nimport { mergeRefs } from \"../utils\";\nexport function valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nexport function percentToValue(percent, min, max) {\n  return (max - min) * percent + min;\n}\n\nfunction makeValuePrecise(value, step) {\n  var stepDecimalPart = step.toString().split(\".\")[1];\n  var stepPrecision = stepDecimalPart ? stepDecimalPart.length : 0;\n  return Number(value.toFixed(stepPrecision));\n}\n\nexport function roundValueToStep(value, step) {\n  return makeValuePrecise(Math.round(value / step) * step, step);\n}\nexport function clampValue(val, min, max) {\n  if (val > max) {\n    return max;\n  }\n\n  if (val < min) {\n    return min;\n  }\n\n  return val;\n} ////////////////////////////////////////////////////////////////\n\nexport var SliderThumb = forwardRef(function (props, _ref) {\n  var _useSliderContext = useSliderContext(),\n      thumbRef = _useSliderContext.thumbRef,\n      isDisabled = _useSliderContext.isDisabled,\n      onFocus = _useSliderContext.onFocus,\n      onKeyDown = _useSliderContext.onThumbKeyDown,\n      min = _useSliderContext.min,\n      max = _useSliderContext.max,\n      valueText = _useSliderContext.valueText,\n      orientation = _useSliderContext.orientation,\n      trackPercent = _useSliderContext.trackPercent,\n      size = _useSliderContext.size,\n      color = _useSliderContext.color,\n      value = _useSliderContext.value,\n      ariaLabelledBy = _useSliderContext.ariaLabelledBy;\n\n  var _useSliderStyle = useSliderStyle({\n    trackPercent: trackPercent,\n    orientation: orientation,\n    size: size,\n    color: color\n  }),\n      thumbStyle = _useSliderStyle.thumbStyle;\n\n  return jsx(PseudoBox, _extends({\n    \"data-slider-thumb\": \"\",\n    d: \"flex\",\n    alignItems: \"center\",\n    outline: \"none\",\n    justifyContent: \"center\",\n    onFocus: onFocus,\n    ref: function ref(node) {\n      return mergeRefs([thumbRef, _ref], node);\n    },\n    role: \"slider\",\n    tabIndex: isDisabled ? undefined : 0,\n    \"aria-disabled\": isDisabled,\n    \"aria-valuemin\": min,\n    \"aria-valuetext\": valueText,\n    \"aria-orientation\": orientation,\n    \"aria-valuenow\": value,\n    \"aria-valuemax\": max,\n    \"aria-labelledby\": ariaLabelledBy,\n    onKeyDown: onKeyDown\n  }, thumbStyle, props));\n}); ////////////////////////////////////////////////////////////////\n\nexport var SliderTrack = function SliderTrack(props) {\n  var _useSliderContext2 = useSliderContext(),\n      trackRef = _useSliderContext2.trackRef,\n      isDisabled = _useSliderContext2.isDisabled,\n      context = _objectWithoutPropertiesLoose(_useSliderContext2, [\"trackRef\", \"isDisabled\"]);\n\n  var _useSliderStyle2 = useSliderStyle(context),\n      trackStyle = _useSliderStyle2.trackStyle;\n\n  return jsx(Box, _extends({\n    \"data-slider-track\": \"\",\n    \"aria-disabled\": isDisabled,\n    ref: trackRef\n  }, trackStyle, props));\n}; ////////////////////////////////////////////////////////////////\n\nexport var SliderFilledTrack = function SliderFilledTrack(props) {\n  var _useSliderContext3 = useSliderContext(),\n      isDisabled = _useSliderContext3.isDisabled,\n      context = _objectWithoutPropertiesLoose(_useSliderContext3, [\"isDisabled\"]);\n\n  var _useSliderStyle3 = useSliderStyle(context),\n      filledTrackStyle = _useSliderStyle3.filledTrackStyle;\n\n  return jsx(PseudoBox, _extends({\n    \"aria-disabled\": isDisabled,\n    \"data-slider-filled-track\": \"\"\n  }, filledTrackStyle, props));\n}; ////////////////////////////////////////////////////////////////\n\nvar SliderContext = createContext();\n\nvar useSliderContext = function useSliderContext() {\n  return useContext(SliderContext);\n};\n\nvar Slider = forwardRef(function (_ref2, ref) {\n  var controlledValue = _ref2.value,\n      defaultValue = _ref2.defaultValue,\n      onChange = _ref2.onChange,\n      onKeyDown = _ref2.onKeyDown,\n      onFocus = _ref2.onFocus,\n      _onBlur = _ref2.onBlur,\n      onMouseDown = _ref2.onMouseDown,\n      isDisabled = _ref2.isDisabled,\n      _ref2$max = _ref2.max,\n      max = _ref2$max === void 0 ? 100 : _ref2$max,\n      _ref2$min = _ref2.min,\n      min = _ref2$min === void 0 ? 0 : _ref2$min,\n      _ref2$step = _ref2.step,\n      step = _ref2$step === void 0 ? 1 : _ref2$step,\n      ariaLabelledBy = _ref2[\"aria-labelledby\"],\n      ariaLabel = _ref2[\"aria-label\"],\n      ariaValueText = _ref2[\"aria-valuetext\"],\n      _ref2$orientation = _ref2.orientation,\n      orientation = _ref2$orientation === void 0 ? \"horizontal\" : _ref2$orientation,\n      getAriaValueText = _ref2.getAriaValueText,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? \"md\" : _ref2$size,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? \"blue\" : _ref2$color,\n      name = _ref2.name,\n      id = _ref2.id,\n      children = _ref2.children,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"value\", \"defaultValue\", \"onChange\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseDown\", \"isDisabled\", \"max\", \"min\", \"step\", \"aria-labelledby\", \"aria-label\", \"aria-valuetext\", \"orientation\", \"getAriaValueText\", \"size\", \"color\", \"name\", \"id\", \"children\"]);\n\n  var _useRef = useRef(controlledValue != null),\n      isControlled = _useRef.current;\n\n  var _useState = useState(defaultValue || 0),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _value = isControlled ? controlledValue : value;\n\n  var actualValue = clampValue(_value, min, max);\n  var trackPercent = valueToPercent(actualValue, min, max);\n\n  var _useSliderStyle4 = useSliderStyle({\n    trackPercent: trackPercent,\n    orientation: orientation,\n    size: size,\n    color: color\n  }),\n      rootStyle = _useSliderStyle4.rootStyle;\n\n  var trackRef = useRef();\n  var thumbRef = useRef();\n\n  var getNewValue = function getNewValue(event) {\n    if (trackRef.current) {\n      var _trackRef$current$get = trackRef.current.getBoundingClientRect(),\n          left = _trackRef$current$get.left,\n          width = _trackRef$current$get.width;\n\n      var _ref3 = event.touches ? event.touches[0] : event,\n          clientX = _ref3.clientX;\n\n      var diffX = clientX - left;\n      var percent = diffX / width;\n      var newValue = percentToValue(percent, min, max);\n\n      if (step) {\n        newValue = roundValueToStep(newValue, step);\n      }\n\n      newValue = clampValue(newValue, min, max);\n      return newValue;\n    }\n  };\n\n  var updateValue = useCallback(function (newValue) {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  }, [isControlled, onChange]);\n\n  var handleThumbKeyDown = function handleThumbKeyDown(event) {\n    var flag = false;\n    var newValue;\n    var tenSteps = (max - min) / 10;\n\n    switch (event.key) {\n      case \"ArrowLeft\":\n      case \"ArrowDown\":\n        newValue = actualValue - step;\n        flag = true;\n        break;\n\n      case \"ArrowRight\":\n      case \"ArrowUp\":\n        newValue = actualValue + step;\n        flag = true;\n        break;\n\n      case \"PageDown\":\n        newValue = actualValue - tenSteps;\n        flag = true;\n        break;\n\n      case \"PageUp\":\n        newValue = actualValue + tenSteps;\n        flag = true;\n        break;\n\n      case \"Home\":\n        newValue = min;\n        flag = true;\n        break;\n\n      case \"End\":\n        newValue = max;\n        flag = true;\n        break;\n\n      default:\n        return;\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (step) {\n      newValue = roundValueToStep(newValue, step);\n    }\n\n    newValue = clampValue(newValue, min, max);\n    updateValue(newValue);\n    onKeyDown && onKeyDown(event);\n  };\n\n  var handleMouseUp = function handleMouseUp() {\n    document.body.removeEventListener(\"mousemove\", handleMouseMove);\n    document.body.removeEventListener(\"touchmove\", handleMouseMove);\n    document.body.removeEventListener(\"mouseup\", handleMouseUp);\n    document.body.removeEventListener(\"touchend\", handleMouseUp);\n  }; // TODO: Optimize this mouseMove event\n\n\n  var handleMouseMove = function handleMouseMove(event) {\n    var newValue = getNewValue(event);\n    updateValue(newValue);\n  };\n\n  var handleMouseDown = function handleMouseDown(event) {\n    if (isDisabled) return;\n    onMouseDown && onMouseDown(event);\n    event.preventDefault();\n    var newValue = getNewValue(event);\n\n    if (newValue !== actualValue) {\n      updateValue(newValue);\n    }\n\n    document.body.addEventListener(\"mousemove\", handleMouseMove);\n    document.body.addEventListener(\"touchmove\", handleMouseMove);\n    document.body.addEventListener(\"mouseup\", handleMouseUp);\n    document.body.addEventListener(\"touchend\", handleMouseUp);\n    thumbRef.current && thumbRef.current.focus();\n  };\n\n  var valueText = getAriaValueText ? getAriaValueText(actualValue) : ariaValueText;\n  var context = {\n    trackRef: trackRef,\n    thumbRef: thumbRef,\n    onThumbKeyDown: handleThumbKeyDown,\n    onFocus: onFocus,\n    trackPercent: trackPercent,\n    ariaLabelledBy: ariaLabelledBy,\n    orientation: orientation,\n    isDisabled: isDisabled,\n    size: size,\n    color: color,\n    min: min,\n    max: max,\n    valueText: valueText,\n    value: actualValue\n  };\n  return jsx(SliderContext.Provider, {\n    value: context\n  }, jsx(Box, _extends({\n    role: \"presentation\",\n    tabIndex: \"-1\",\n    onMouseDown: handleMouseDown,\n    onTouchStart: handleMouseDown,\n    onMouseLeave: handleMouseUp,\n    onTouchEnd: handleMouseUp,\n    onBlur: function onBlur(event) {\n      handleMouseUp();\n      _onBlur && _onBlur(event);\n    },\n    py: 3,\n    \"aria-disabled\": isDisabled,\n    ref: ref,\n    css: {\n      touchAction: \"none\"\n    }\n  }, rootStyle, rest), children, jsx(\"input\", {\n    type: \"hidden\",\n    value: actualValue,\n    name: name,\n    id: id\n  })));\n});\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}