{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport { bool, func, string } from \"prop-types\";\nimport { createContext, forwardRef, useContext, useEffect, useRef, useState } from \"react\";\nimport { Manager, Popper, Reference } from \"react-popper\";\nimport Box from \"../Box\";\nimport PseudoBox from \"../PseudoBox\";\nimport Text from \"../Text\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport usePrevious from \"../usePrevious\";\nimport { getFocusables, mergeRefs } from \"../utils\";\nimport { useMenuItemStyle, useMenuListStyle } from \"./styles\";\nimport Divider from \"../Divider\";\nvar MenuContext = createContext();\n\nvar Menu = function Menu(_ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      _ref$autoSelect = _ref.autoSelect,\n      autoSelect = _ref$autoSelect === void 0 ? true : _ref$autoSelect,\n      _ref$closeOnBlur = _ref.closeOnBlur,\n      closeOnBlur = _ref$closeOnBlur === void 0 ? true : _ref$closeOnBlur,\n      _ref$closeOnSelect = _ref.closeOnSelect,\n      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState = useState({\n    isOpen: isOpen || false,\n    index: -1\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var menuId = \"menu-\" + useId();\n  var buttonId = \"menubutton-\" + useId();\n  var menuRef = useRef(null);\n  var buttonRef = useRef(null);\n  var focusableItems = useRef(null);\n  useEffect(function () {\n    var focusables = getFocusables(menuRef.current).filter(function (node) {\n      return [\"menuitem\", \"menuitemradio\", \"menuitemcheckbox\"].includes(node.getAttribute(\"role\"));\n    });\n    focusableItems.current = menuRef.current ? focusables : [];\n    initTabIndex();\n  }, []);\n\n  var updateTabIndex = function updateTabIndex(index) {\n    if (focusableItems.current.length > 0) {\n      var nodeAtIndex = focusableItems.current[index];\n      focusableItems.current.forEach(function (node) {\n        if (node !== nodeAtIndex) {\n          node.setAttribute(\"tabindex\", -1);\n        }\n      });\n      nodeAtIndex.setAttribute(\"tabindex\", 0);\n    }\n  };\n\n  var resetTabIndex = function resetTabIndex() {\n    focusableItems.current.forEach(function (node) {\n      return node.setAttribute(\"tabindex\", -1);\n    });\n  };\n\n  var initTabIndex = function initTabIndex() {\n    focusableItems.current.forEach(function (node, index) {\n      return index === 0 && node.setAttribute(\"tabindex\", 0);\n    });\n  };\n\n  var wasPreviouslyOpen = usePrevious(state.isOpen);\n  useEffect(function () {\n    if (state.index !== -1) {\n      focusableItems.current[state.index].focus();\n      updateTabIndex(state.index);\n    }\n\n    if (state.index === -1 && !state.isOpen && wasPreviouslyOpen) {\n      buttonRef.current && buttonRef.current.focus();\n    }\n\n    if (state.index === -1 && state.isOpen) {\n      menuRef.current && menuRef.current.focus();\n    }\n  }, [state, wasPreviouslyOpen]);\n\n  var focusOnFirstItem = function focusOnFirstItem() {\n    setState({\n      isOpen: true,\n      index: 0\n    });\n  };\n\n  var openMenu = function openMenu() {\n    setState(_objectSpread({}, state, {\n      isOpen: true\n    }));\n  };\n\n  var focusAtIndex = function focusAtIndex(index) {\n    setState(_objectSpread({}, state, {\n      index: index\n    }));\n  };\n\n  var focusOnLastItem = function focusOnLastItem() {\n    setState({\n      isOpen: true,\n      index: focusableItems.current.length - 1\n    });\n  };\n\n  var closeMenu = function closeMenu() {\n    setState({\n      isOpen: false,\n      index: -1\n    });\n    resetTabIndex();\n  };\n\n  var context = {\n    state: state,\n    focusAtIndex: focusAtIndex,\n    focusOnLastItem: focusOnLastItem,\n    focusOnFirstItem: focusOnFirstItem,\n    closeMenu: closeMenu,\n    buttonRef: buttonRef,\n    menuRef: menuRef,\n    focusableItems: focusableItems,\n    menuId: menuId,\n    buttonId: buttonId,\n    openMenu: openMenu,\n    autoSelect: autoSelect,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    colorMode: colorMode\n  };\n  return jsx(MenuContext.Provider, {\n    value: context\n  }, jsx(Manager, null, typeof children === \"function\" ? children({\n    isOpen: state.isOpen,\n    onClose: closeMenu\n  }) : children));\n};\n\nexport function useMenuContext() {\n  var context = useContext(MenuContext);\n\n  if (context === undefined) {\n    throw new Error(\"useMenuContext must be used within a MenuContext Provider\");\n  }\n\n  return context;\n} //////////////////////////////////////////////////////////////////////////////////////////\n\nvar PseudoButton = forwardRef(function (props, ref) {\n  return jsx(PseudoBox, _extends({\n    ref: ref,\n    as: \"button\"\n  }, props));\n});\nvar MenuButton = forwardRef(function (_ref2, _ref4) {\n  var _onClick = _ref2.onClick,\n      _onKeyDown = _ref2.onKeyDown,\n      _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? PseudoButton : _ref2$as,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"onClick\", \"onKeyDown\", \"as\"]);\n\n  var _useMenuContext = useMenuContext(),\n      isOpen = _useMenuContext.state.isOpen,\n      focusOnLastItem = _useMenuContext.focusOnLastItem,\n      focusOnFirstItem = _useMenuContext.focusOnFirstItem,\n      closeMenu = _useMenuContext.closeMenu,\n      menuId = _useMenuContext.menuId,\n      buttonId = _useMenuContext.buttonId,\n      autoSelect = _useMenuContext.autoSelect,\n      openMenu = _useMenuContext.openMenu,\n      buttonRef = _useMenuContext.buttonRef;\n\n  return jsx(Reference, null, function (_ref3) {\n    var referenceRef = _ref3.ref;\n    return jsx(Comp, _extends({\n      \"aria-haspopup\": \"menu\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": menuId,\n      id: buttonId,\n      role: \"button\",\n      ref: function ref(node) {\n        return mergeRefs([buttonRef, referenceRef, _ref4], node);\n      },\n      onClick: function onClick(event) {\n        if (isOpen) {\n          closeMenu();\n        } else {\n          autoSelect ? focusOnFirstItem() : openMenu();\n        }\n\n        if (_onClick) {\n          _onClick(event);\n        }\n      },\n      onKeyDown: function onKeyDown(event) {\n        if (event.key === \"ArrowDown\") {\n          event.preventDefault();\n          focusOnFirstItem();\n        }\n\n        if (event.key === \"ArrowUp\") {\n          event.preventDefault();\n          focusOnLastItem();\n        }\n\n        if (_onKeyDown) {\n          _onKeyDown(event);\n        }\n      }\n    }, rest));\n  });\n}); //////////////////////////////////////////////////////////////////////////////////////////\n\nvar MenuList = function MenuList(_ref5) {\n  var onKeyDown = _ref5.onKeyDown,\n      onBlur = _ref5.onBlur,\n      placement = _ref5.placement,\n      props = _objectWithoutPropertiesLoose(_ref5, [\"onKeyDown\", \"onBlur\", \"placement\"]);\n\n  var _useMenuContext2 = useMenuContext(),\n      _useMenuContext2$stat = _useMenuContext2.state,\n      index = _useMenuContext2$stat.index,\n      isOpen = _useMenuContext2$stat.isOpen,\n      focusAtIndex = _useMenuContext2.focusAtIndex,\n      focusOnFirstItem = _useMenuContext2.focusOnFirstItem,\n      focusOnLastItem = _useMenuContext2.focusOnLastItem,\n      closeMenu = _useMenuContext2.closeMenu,\n      focusableItems = _useMenuContext2.focusableItems,\n      buttonRef = _useMenuContext2.buttonRef,\n      menuId = _useMenuContext2.menuId,\n      buttonId = _useMenuContext2.buttonId,\n      menuRef = _useMenuContext2.menuRef,\n      closeOnBlur = _useMenuContext2.closeOnBlur;\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var count = focusableItems.current.length;\n    var nextIndex;\n\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      nextIndex = (index + 1) % count;\n      focusAtIndex(nextIndex);\n    } else if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      nextIndex = (index - 1 + count) % count;\n      focusAtIndex(nextIndex);\n    } else if (event.key === \"Home\") {\n      focusOnFirstItem();\n    } else if (event.key === \"End\") {\n      focusOnLastItem();\n    } else if (event.key === \"Tab\") {\n      event.preventDefault();\n    } else if (event.key === \"Escape\") {\n      closeMenu();\n    } // Set focus based on first character\n\n\n    if (/^[a-z0-9_-]$/i.test(event.key)) {\n      event.stopPropagation();\n      event.preventDefault();\n      var foundNode = focusableItems.current.find(function (item) {\n        return item.textContent.toLowerCase().startsWith(event.key);\n      });\n\n      if (foundNode) {\n        nextIndex = focusableItems.current.indexOf(foundNode);\n        focusAtIndex(nextIndex);\n      }\n    }\n\n    onKeyDown && onKeyDown(event);\n  }; // Close the menu on blur\n\n\n  var handleBlur = function handleBlur(event) {\n    if (closeOnBlur && isOpen && menuRef.current && buttonRef.current && !menuRef.current.contains(event.relatedTarget) && !buttonRef.current.contains(event.relatedTarget)) {\n      closeMenu();\n    }\n\n    onBlur && onBlur(event);\n  };\n\n  var styleProps = useMenuListStyle();\n  return jsx(Popper, {\n    placement: placement\n  }, function (_ref6) {\n    var _ref7 = _ref6.ref,\n        popperStyle = _ref6.style;\n    return jsx(Box, _extends({\n      minW: \"3xs\",\n      rounded: \"md\",\n      role: \"menu\",\n      ref: function ref(node) {\n        return mergeRefs([menuRef, _ref7], node);\n      },\n      id: menuId,\n      py: 2,\n      pos: \"absolute\",\n      \"aria-labelledby\": buttonId,\n      onKeyDown: handleKeyDown,\n      onBlur: handleBlur,\n      tabIndex: -1,\n      zIndex: \"1\",\n      hidden: !isOpen,\n      css: popperStyle\n    }, styleProps, props));\n  });\n}; //////////////////////////////////////////////////////////////////////////////////////////\n\n\nvar MenuItem = forwardRef(function (_ref8, ref) {\n  var isDisabled = _ref8.isDisabled,\n      _onClick2 = _ref8.onClick,\n      _onMouseLeave = _ref8.onMouseLeave,\n      _onKeyDown2 = _ref8.onKeyDown,\n      _onMouseMove = _ref8.onMouseMove,\n      _ref8$role = _ref8.role,\n      role = _ref8$role === void 0 ? \"menuitem\" : _ref8$role,\n      props = _objectWithoutPropertiesLoose(_ref8, [\"isDisabled\", \"onClick\", \"onMouseLeave\", \"onKeyDown\", \"onMouseMove\", \"role\"]);\n\n  var _useMenuContext3 = useMenuContext(),\n      focusableItems = _useMenuContext3.focusableItems,\n      focusAtIndex = _useMenuContext3.focusAtIndex,\n      closeOnSelect = _useMenuContext3.closeOnSelect,\n      closeMenu = _useMenuContext3.closeMenu;\n\n  var styleProps = useMenuItemStyle();\n  return jsx(PseudoBox, _extends({\n    as: \"button\",\n    ref: ref,\n    display: \"flex\",\n    textDecoration: \"none\",\n    color: \"inherit\",\n    minHeight: \"32px\",\n    alignItems: \"center\",\n    textAlign: \"left\",\n    outline: \"none\",\n    px: 4,\n    role: role,\n    tabIndex: -1,\n    disabled: isDisabled,\n    \"aria-disabled\": isDisabled,\n    onClick: function onClick(event) {\n      if (isDisabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      _onClick2 && _onClick2(event);\n      closeOnSelect && closeMenu();\n    },\n    onMouseMove: function onMouseMove(event) {\n      if (isDisabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      var nextIndex = focusableItems.current.indexOf(event.currentTarget);\n      focusAtIndex(nextIndex);\n      _onMouseMove && _onMouseMove(event);\n    },\n    onMouseLeave: function onMouseLeave(event) {\n      focusAtIndex(-1);\n      _onMouseLeave && _onMouseLeave(event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (isDisabled) return;\n\n      if (event.key === \"Enter\" || event.key === \" \") {\n        event.preventDefault();\n        _onClick2 && _onClick2();\n        closeOnSelect && closeMenu();\n      }\n\n      _onKeyDown2 && _onKeyDown2(event);\n    }\n  }, styleProps, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes = {\n  isDisabled: bool,\n  onKeyDown: func,\n  onClick: func,\n  onMouseMove: func,\n  role: string\n} : void 0; //////////////////////////////////////////////////////////////////////////////////////////\n\nvar MenuDivider = forwardRef(function (props, ref) {\n  return jsx(Divider, _extends({\n    ref: ref,\n    orientation: \"horizontal\"\n  }, props));\n}); //////////////////////////////////////////////////////////////////////////////////////////\n\nvar MenuGroup = forwardRef(function (_ref9, ref) {\n  var children = _ref9.children,\n      title = _ref9.title,\n      rest = _objectWithoutPropertiesLoose(_ref9, [\"children\", \"title\"]);\n\n  return jsx(Box, {\n    ref: ref,\n    role: \"group\"\n  }, title && jsx(Text, _extends({\n    mx: 4,\n    my: 2,\n    fontWeight: \"semibold\",\n    fontSize: \"sm\"\n  }, rest), title), children);\n}); //////////////////////////////////////////////////////////////////////////////////////////\n\nexport default Menu;\nexport { MenuButton, MenuDivider, MenuGroup, MenuList, MenuItem };\nexport * from \"./MenuOption\";","map":null,"metadata":{},"sourceType":"module"}