{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport Portal from \"@reach/portal\";\nimport { cloneElement, useRef, Children } from \"react\";\nimport { Manager, Popper, Reference } from \"react-popper\";\nimport { assignRef, genId } from \"../utils\";\nimport { PopoverTransition, popperStyle } from \"../Popover/components\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Box from \"../Box\";\nimport useDisclosure from \"../useDisclosure\";\nimport { useId } from \"@reach/auto-id\";\nvar TooltipContent = styled(Box)(_templateObject(), popperStyle);\n\nvar Tooltip = function Tooltip(_ref) {\n  var bg = _ref.bg,\n      color = _ref.color,\n      label = _ref.label,\n      _ref$showDelay = _ref.showDelay,\n      showDelay = _ref$showDelay === void 0 ? 100 : _ref$showDelay,\n      _ref$hideDelay = _ref.hideDelay,\n      hideDelay = _ref$hideDelay === void 0 ? 100 : _ref$hideDelay,\n      _ref$transitionDurati = _ref.transitionDuration,\n      transitionDuration = _ref$transitionDurati === void 0 ? 50 : _ref$transitionDurati,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? \"auto\" : _ref$placement,\n      children = _ref.children,\n      showArrow = _ref.showArrow,\n      closeOnClick = _ref.closeOnClick,\n      defaultIsOpen = _ref.defaultIsOpen,\n      controlledIsOpen = _ref.isOpen,\n      onOpenChange = _ref.onOpenChange,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"bg\", \"color\", \"label\", \"showDelay\", \"hideDelay\", \"transitionDuration\", \"placement\", \"children\", \"showArrow\", \"closeOnClick\", \"defaultIsOpen\", \"isOpen\", \"onOpenChange\"]);\n\n  var _useDisclosure = useDisclosure(defaultIsOpen || false),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen;\n\n  var _useRef = useRef(controlledIsOpen != null),\n      isControlled = _useRef.current;\n\n  var _isOpen = isControlled ? controlledIsOpen : isOpen;\n\n  var openWithDelay = function openWithDelay() {\n    setTimeout(onOpen, showDelay);\n  };\n\n  var closeWithDelay = function closeWithDelay() {\n    setTimeout(onClose, hideDelay);\n  };\n\n  var tooltipId = \"tooltip-\" + useId();\n\n  var handleOpen = function handleOpen() {\n    !isControlled && openWithDelay();\n    onOpenChange && onOpenChange();\n  };\n\n  var handleClose = function handleClose() {\n    !isControlled && closeWithDelay();\n    onOpenChange && onOpenChange();\n  };\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _bg = colorMode === \"dark\" ? \"gray.300\" : \"gray.700\";\n\n  var _color = colorMode === \"dark\" ? \"gray.900\" : \"whiteAlpha.900\";\n\n  var bgColor = bg || _bg;\n  var textColor = color || _color;\n  var child = typeof children === \"string\" ? children : Children.only(children);\n\n  var handleClick = function handleClick(event) {\n    closeOnClick && closeWithDelay();\n\n    if (typeof children !== \"string\") {\n      child.props.onClick && child.props.onClick(event);\n    }\n  };\n\n  return jsx(Manager, null, jsx(Reference, null, function (_ref2) {\n    var referenceRef = _ref2.ref; // Props for the reference element.\n\n    var referenceProps = {\n      \"aria-labelledby\": tooltipId,\n      ref: function ref(node) {\n        assignRef(referenceRef, node);\n      },\n      onMouseEnter: handleOpen,\n      onMouseLeave: handleClose,\n      onClick: handleClick,\n      onFocus: handleOpen,\n      onBlur: handleClose\n    }; // If you pass just a string to the Tooltip children,\n    // let's wrap it in a span as a fallback\n\n    if (typeof child === \"string\") {\n      return jsx(Box, _extends({\n        as: \"span\"\n      }, referenceProps), child);\n    }\n\n    return cloneElement(child, _objectSpread({}, referenceProps));\n  }), jsx(Popper, {\n    placement: placement\n  }, function (_ref3) {\n    var popperRef = _ref3.ref,\n        style = _ref3.style,\n        arrowProps = _ref3.arrowProps,\n        placement = _ref3.placement;\n    return jsx(PopoverTransition, {\n      duration: transitionDuration,\n      isOpen: _isOpen\n    }, function (styles) {\n      return jsx(Portal, null, jsx(TooltipContent, _extends({\n        ref: popperRef,\n        px: \"8px\",\n        py: \"2px\",\n        id: tooltipId,\n        role: \"tooltip\",\n        bg: bgColor,\n        borderRadius: \"sm\",\n        fontWeight: \"medium\",\n        color: textColor,\n        css: _objectSpread({}, style, {\n          transform: \"\" + style.transform,\n          opacity: styles.opacity\n        }),\n        \"data-placement\": placement,\n        fontSize: \"sm\",\n        boxShadow: \"md\",\n        maxWidth: \"320px\"\n      }, rest), label, showArrow && jsx(Box, {\n        borderColor: bgColor,\n        \"data-arrow\": \"\",\n        ref: arrowProps.ref,\n        style: arrowProps.style\n      })));\n    });\n  }));\n};\n\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}