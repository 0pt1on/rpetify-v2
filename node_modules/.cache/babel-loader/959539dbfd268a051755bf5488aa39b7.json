{"ast":null,"code":"var _jsxFileName = \"/Users/karolis/imkarolis/rpetify-v2/src/components/workout-card/WorkContent.js\";\nimport React from \"react\";\nimport { getRoundedWeight, getPlatesOnBar, getWorksetWeight, getRoundedWeightKg } from \"utils\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box, Text, Flex, Grid } from \"@chakra-ui/core\";\nexport default function WorkContent(_ref) {\n  var liftName = _ref.liftName,\n      sets = _ref.sets;\n  var oneRepMax = useSelector(function (state) {\n    return state.oneRepMax;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.variants;\n  }),\n      variants = _useSelector.variants;\n\n  var units = useSelector(function (state) {\n    return state.units;\n  }); // const barbellWeight = useSelector(state => state.barbellWeight);\n\n  var barbellWeight = units === \"lbs\" ? 44 : 20;\n  var oneRM;\n  var oneRMExist = oneRepMax.find(function (_ref2) {\n    var name = _ref2.name;\n    return name === liftName;\n  });\n\n  if (oneRMExist) {\n    oneRM = oneRMExist.oneRM;\n  } else {\n    oneRM = variants.find(function (_ref3) {\n      var name = _ref3.name;\n      return name === liftName;\n    }).oneRM;\n  }\n\n  return React.createElement(Box, {\n    px: \"2\",\n    py: \"3\",\n    fontSize: \"xl\",\n    fontWeight: \"semibold\",\n    color: \"gray.200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    my: \"2\",\n    fontSize: \"md\",\n    fontWeight: \"black\",\n    letterSpacing: \"wider\",\n    color: \"yellow.500\",\n    gap: 2,\n    gridTemplateColumns: \"1fr 3fr 5fr\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"NO\"), React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"VOLUME\"), React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"PLATES\")), sets.map(function (_ref4, i) {\n    var id = _ref4.id,\n        reps = _ref4.reps,\n        rpe = _ref4.rpe,\n        sets = _ref4.sets,\n        percent = _ref4.percent;\n    var weight = getWorksetWeight({\n      rpe: rpe,\n      reps: reps,\n      oneRM: oneRM\n    });\n    var workWeightByUnit = units === \"lbs\" ? getRoundedWeight(weight) : getRoundedWeightKg(weight);\n    return React.createElement(Grid, {\n      key: id,\n      my: \"4\",\n      gap: 2,\n      gridTemplateColumns: \"1fr 3fr 5fr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Text, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, i + 1), React.createElement(Text, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Box, {\n      as: \"span\",\n      lineHeight: \"0\",\n      fontSize: \"xs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, workWeightByUnit), React.createElement(Box, {\n      as: \"span\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, reps, \"@\", rpe, \" x \", sets))), React.createElement(Text, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, getPlatesOnBar({\n      weight: weight,\n      units: units,\n      barbellWeight: barbellWeight\n    })));\n  }));\n}","map":{"version":3,"sources":["/Users/karolis/imkarolis/rpetify-v2/src/components/workout-card/WorkContent.js"],"names":["React","getRoundedWeight","getPlatesOnBar","getWorksetWeight","getRoundedWeightKg","useSelector","useDispatch","Box","Text","Flex","Grid","WorkContent","liftName","sets","oneRepMax","state","variants","units","barbellWeight","oneRM","oneRMExist","find","name","map","i","id","reps","rpe","percent","weight","workWeightByUnit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  getRoundedWeight,\n  getPlatesOnBar,\n  getWorksetWeight,\n  getRoundedWeightKg\n} from \"utils\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box, Text, Flex, Grid } from \"@chakra-ui/core\";\n\nexport default function WorkContent({ liftName, sets }) {\n  const oneRepMax = useSelector(state => state.oneRepMax);\n  const { variants } = useSelector(state => state.variants);\n  const units = useSelector(state => state.units);\n  // const barbellWeight = useSelector(state => state.barbellWeight);\n  const barbellWeight = units === \"lbs\" ? 44 : 20;\n\n  let oneRM;\n  let oneRMExist = oneRepMax.find(({ name }) => name === liftName);\n  if (oneRMExist) {\n    oneRM = oneRMExist.oneRM;\n  } else {\n    oneRM = variants.find(({ name }) => name === liftName).oneRM;\n  }\n\n  return (\n    <Box px=\"2\" py=\"3\" fontSize=\"xl\" fontWeight=\"semibold\" color=\"gray.200\">\n      <Grid\n        my=\"2\"\n        fontSize=\"md\"\n        fontWeight=\"black\"\n        letterSpacing=\"wider\"\n        color=\"yellow.500\"\n        gap={2}\n        gridTemplateColumns=\"1fr 3fr 5fr\"\n      >\n        <Text textAlign=\"center\">NO</Text>\n        <Text textAlign=\"center\">VOLUME</Text>\n        <Text textAlign=\"center\">PLATES</Text>\n      </Grid>\n\n      {sets.map(({ id, reps, rpe, sets, percent }, i) => {\n        const weight = getWorksetWeight({ rpe, reps, oneRM });\n\n        const workWeightByUnit =\n          units === \"lbs\"\n            ? getRoundedWeight(weight)\n            : getRoundedWeightKg(weight);\n\n        return (\n          <Grid key={id} my=\"4\" gap={2} gridTemplateColumns=\"1fr 3fr 5fr\">\n            <Text textAlign=\"center\">{i + 1}</Text>\n            <Text textAlign=\"center\">\n              <Flex flexDirection=\"column\">\n                <Box as=\"span\" lineHeight=\"0\" fontSize=\"xs\">\n                  {workWeightByUnit}\n                </Box>\n                <Box as=\"span\">\n                  {reps}@{rpe} x {sets}\n                </Box>\n              </Flex>\n            </Text>\n            <Text textAlign=\"center\">\n              {getPlatesOnBar({\n                weight,\n                units,\n                barbellWeight\n              })}\n            </Text>\n          </Grid>\n        );\n      })}\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}