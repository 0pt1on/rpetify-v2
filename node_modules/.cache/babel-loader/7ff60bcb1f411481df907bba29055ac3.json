{"ast":null,"code":"import _slicedToArray from \"/Users/karolis/imkarolis/rpetify-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/karolis/imkarolis/rpetify-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/karolis/imkarolis/rpetify-v2/src/components/Modal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Text, Flex, Stack, Icon, Grid, Button, Modal as ChakraModal, ModalHeader, ModalBody, ModalFooter } from \"@chakra-ui/core\";\nexport default function Modal(_ref) {\n  var trigger = _ref.trigger,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"trigger\", \"children\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isOpen = _React$useState2[0],\n      setIsOpen = _React$useState2[1];\n\n  var open = function open() {\n    return setIsOpen(true);\n  };\n\n  var close = function close() {\n    return setIsOpen(false);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Box, Object.assign({}, props, {\n    cursor: \"pointer\",\n    onClick: open,\n    textTransform: \"uppercase\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), trigger), React.createElement(ChakraModal, {\n    mt: \"1\",\n    bg: \"gray.700\",\n    top: \"0\",\n    style: {\n      maxHeight: \"calc(100vh - 4rem - 56px)\"\n    },\n    isOpen: isOpen,\n    onClose: close,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(ModalBody, {\n    p: \"2\",\n    overflowY: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, children)));\n}","map":{"version":3,"sources":["/Users/karolis/imkarolis/rpetify-v2/src/components/Modal.js"],"names":["React","useState","useEffect","Box","Text","Flex","Stack","Icon","Grid","Button","Modal","ChakraModal","ModalHeader","ModalBody","ModalFooter","trigger","children","props","isOpen","setIsOpen","open","close","maxHeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,KAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,MAPF,EAQEC,KAAK,IAAIC,WARX,EASEC,WATF,EAUEC,SAVF,EAWEC,WAXF,QAYO,iBAZP;AAcA,eAAe,SAASJ,KAAT,OAAgD;AAAA,MAA/BK,OAA+B,QAA/BA,OAA+B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAATC,KAAS;;AAAA,wBACjCjB,KAAK,CAACC,QAAN,CAAe,KAAf,CADiC;AAAA;AAAA,MACtDiB,MADsD;AAAA,MAC9CC,SAD8C;;AAG7D,MAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,WAAMD,SAAS,CAAC,IAAD,CAAf;AAAA,GAAb;;AACA,MAAME,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMF,SAAS,CAAC,KAAD,CAAf;AAAA,GAAd;;AAEA,SACE,0CACE,oBAAC,GAAD,oBAASF,KAAT;AAAgB,IAAA,MAAM,EAAC,SAAvB;AAAiC,IAAA,OAAO,EAAEG,IAA1C;AAAgD,IAAA,aAAa,EAAC,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGL,OADH,CADF,EAIE,oBAAC,WAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,GAAG,EAAC,GAHN;AAIE,IAAA,KAAK,EAAE;AAAEO,MAAAA,SAAS;AAAX,KAJT;AAKE,IAAA,MAAM,EAAEJ,MALV;AAME,IAAA,OAAO,EAAEG,KANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,SAAD;AAAW,IAAA,CAAC,EAAC,GAAb;AAAiB,IAAA,SAAS,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CARF,CAJF,CADF;AAmBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Text,\n  Flex,\n  Stack,\n  Icon,\n  Grid,\n  Button,\n  Modal as ChakraModal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from \"@chakra-ui/core\";\n\nexport default function Modal({ trigger, children, ...props }) {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const open = () => setIsOpen(true);\n  const close = () => setIsOpen(false);\n\n  return (\n    <>\n      <Box {...props} cursor=\"pointer\" onClick={open} textTransform=\"uppercase\">\n        {trigger}\n      </Box>\n      <ChakraModal\n        mt=\"1\"\n        bg=\"gray.700\"\n        top=\"0\"\n        style={{ maxHeight: `calc(100vh - 4rem - 56px)` }}\n        isOpen={isOpen}\n        onClose={close}\n      >\n        <ModalBody p=\"2\" overflowY=\"auto\">\n          {children}\n        </ModalBody>\n      </ChakraModal>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}