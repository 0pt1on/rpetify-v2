{"ast":null,"code":"export function getOneRepMax(_ref) {\n  var rpe = _ref.rpe,\n      reps = _ref.reps,\n      weight = _ref.weight;\n  var p = lookupTable[rpe][reps];\n  return Math.round(weight / p);\n}\nexport function getWorksetWeight(_ref2) {\n  var rpe = _ref2.rpe,\n      reps = _ref2.reps,\n      oneRM = _ref2.oneRM;\n  var p = lookupTable[rpe][reps];\n  return Math.round(oneRM * p);\n}\nexport function getPlatesOnBar(_ref3) {\n  var weight = _ref3.weight,\n      units = _ref3.units,\n      barbellWeight = _ref3.barbellWeight;\n  var roundedWeight = units === \"lbs\" ? getRoundedWeight(weight) : getRoundedWeightKg(weight);\n  var lbsPlates = [45, 35, 25, 10, 5, 2.5];\n  var kgPlates = [25, 20, 15, 10, 5, 2.5, 1.5];\n  var platesArray = units === \"lbs\" ? lbsPlates : kgPlates;\n  var oneSideWeight = (roundedWeight - barbellWeight) / 2;\n  var res = platesArray.reduce(function (acc, plate) {\n    var platesQuantity = oneSideWeight / plate;\n    var isWholePlates = platesQuantity >= 1 && platesQuantity % 1 === 0;\n    var isAtLeastOneWholePlate = platesQuantity >= 1 && platesQuantity % 1 !== 0;\n\n    if (isWholePlates) {\n      oneSideWeight -= plate * platesQuantity;\n      return acc += getString(plate, platesQuantity);\n    } else if (isAtLeastOneWholePlate) {\n      oneSideWeight -= plate * Math.floor(platesQuantity);\n      return acc += getString(plate, platesQuantity);\n    }\n\n    return acc;\n  }, \"\");\n  return res.slice(0, -1); //e.g 45x3/25/10/2.5\n}\n\nfunction getString(next, platesQuantity) {\n  return \"\".concat(next).concat(Math.floor(platesQuantity) > 1 ? \"x\".concat(Math.floor(platesQuantity)) : \"\", \"/\");\n}\n\nexport function getRoundedWeight(weight) {\n  var weightRounded = Math.round(weight);\n  var weightLastDigit = weightRounded % 10;\n\n  if (weightLastDigit !== 0 || weightLastDigit !== 5) {\n    if (weightLastDigit === 1 || weightLastDigit === 6) {\n      weightRounded -= 1;\n    } else if (weightLastDigit === 2 || weightLastDigit === 7) {\n      weightRounded -= 2;\n    } else if (weightLastDigit === 3 || weightLastDigit === 8) {\n      weightRounded += 2;\n    } else if (weightLastDigit === 4 || weightLastDigit === 9) {\n      weightRounded += 1;\n    }\n  }\n\n  return weightRounded;\n}\nexport function getRoundedWeightKg(weight) {\n  var roundedToOneDecimal = getKgWithDecimal(weight);\n  var weightRounded = roundedToOneDecimal;\n  var conv = String(roundedToOneDecimal).split(\"\");\n  var weightLastDigit = Number(conv[conv.length - 1]);\n  var thereIsNoReminder = roundedToOneDecimal % 1 === 0;\n  if (thereIsNoReminder) return roundedToOneDecimal;\n\n  if (weightLastDigit !== 0 || weightLastDigit !== 5) {\n    if (weightLastDigit === 1 || weightLastDigit === 6) {\n      weightRounded -= 0.1;\n    } else if (weightLastDigit === 2 || weightLastDigit === 7) {\n      weightRounded -= 0.2;\n    } else if (weightLastDigit === 3 || weightLastDigit === 8) {\n      weightRounded += 0.2;\n    } else if (weightLastDigit === 4 || weightLastDigit === 9) {\n      weightRounded += 0.1;\n    }\n  }\n\n  return weightRounded;\n}\nexport function getKgWithDecimal(weight) {\n  return Number((weight * 0.453592).toFixed(1));\n}\nexport function getOneRMByUnit(units, weight) {\n  return units === \"lbs\" ? weight : getKgWithDecimal(weight);\n}\nvar lookupTable = {\n  10: [null, 1, 0.955, 0.922, 0.892, 0.863, 0.837, 0.811, 0.786, 0.762, 0.739, 0.707, 0.68],\n  9.5: [null, 0.978, 0.939, 0.907, 0.878, 0.85, 0.824, 0.799, 0.774, 0.751, 0.723, 0.694, 0.667],\n  9: [null, 0.955, 0.922, 0.892, 0.863, 0.837, 0.811, 0.786, 0.762, 0.739, 0.707, 0.68, 0.653],\n  8.5: [null, 0.939, 0.907, 0.878, 0.85, 0.824, 0.799, 0.774, 0.751, 0.723, 0.694, 0.667, 0.64],\n  8: [null, 0.922, 0.892, 0.863, 0.837, 0.811, 0.786, 0.762, 0.739, 0.707, 0.68, 0.653, 0.626],\n  7.5: [null, 0.907, 0.878, 0.85, 0.824, 0.799, 0.774, 0.751, 0.723, 0.694, 0.667, 0.64, 0.613],\n  7: [null, 0.892, 0.863, 0.837, 0.811, 0.786, 0.762, 0.739, 0.707, 0.68, 0.653, 0.626, 0.599],\n  6.5: [null, 0.878, 0.85, 0.824, 0.799, 0.774, 0.751, 0.723, 0.694, 0.667, 0.64, 0.613, 0.586] // 6: [\n  //   null,\n  //   0.863,\n  //   0.837,\n  //   0.811,\n  //   0.786,\n  //   0.762,\n  //   0.739,\n  //   0.707,\n  //   0.68,\n  //   0.653,\n  //   0.626,\n  //   0.599,\n  //   0.599,\n  //   0.572\n  // ]\n\n};","map":{"version":3,"sources":["/Users/karolis/imkarolis/rpetify-v2/src/utils/index.js"],"names":["getOneRepMax","rpe","reps","weight","p","lookupTable","Math","round","getWorksetWeight","oneRM","getPlatesOnBar","units","barbellWeight","roundedWeight","getRoundedWeight","getRoundedWeightKg","lbsPlates","kgPlates","platesArray","oneSideWeight","res","reduce","acc","plate","platesQuantity","isWholePlates","isAtLeastOneWholePlate","getString","floor","slice","next","weightRounded","weightLastDigit","roundedToOneDecimal","getKgWithDecimal","conv","String","split","Number","length","thereIsNoReminder","toFixed","getOneRMByUnit"],"mappings":"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","sourcesContent":["export function getOneRepMax({ rpe, reps, weight }) {\n  const p = lookupTable[rpe][reps];\n  return Math.round(weight / p);\n}\nexport function getWorksetWeight({ rpe, reps, oneRM }) {\n  const p = lookupTable[rpe][reps];\n  return Math.round(oneRM * p);\n}\n\nexport function getPlatesOnBar({ weight, units, barbellWeight }) {\n  const roundedWeight =\n    units === \"lbs\" ? getRoundedWeight(weight) : getRoundedWeightKg(weight);\n\n  const lbsPlates = [45, 35, 25, 10, 5, 2.5];\n  const kgPlates = [25, 20, 15, 10, 5, 2.5, 1.5];\n\n  const platesArray = units === \"lbs\" ? lbsPlates : kgPlates;\n  let oneSideWeight = (roundedWeight - barbellWeight) / 2;\n\n  let res = platesArray.reduce((acc, plate) => {\n    const platesQuantity = oneSideWeight / plate;\n    const isWholePlates = platesQuantity >= 1 && platesQuantity % 1 === 0;\n    const isAtLeastOneWholePlate =\n      platesQuantity >= 1 && platesQuantity % 1 !== 0;\n\n    if (isWholePlates) {\n      oneSideWeight -= plate * platesQuantity;\n      return (acc += getString(plate, platesQuantity));\n    } else if (isAtLeastOneWholePlate) {\n      oneSideWeight -= plate * Math.floor(platesQuantity);\n      return (acc += getString(plate, platesQuantity));\n    }\n    return acc;\n  }, \"\");\n\n  return res.slice(0, -1); //e.g 45x3/25/10/2.5\n}\n\nfunction getString(next, platesQuantity) {\n  return `${next}${\n    Math.floor(platesQuantity) > 1 ? `x${Math.floor(platesQuantity)}` : \"\"\n  }/`;\n}\n\nexport function getRoundedWeight(weight) {\n  let weightRounded = Math.round(weight);\n\n  const weightLastDigit = weightRounded % 10;\n  if (weightLastDigit !== 0 || weightLastDigit !== 5) {\n    if (weightLastDigit === 1 || weightLastDigit === 6) {\n      weightRounded -= 1;\n    } else if (weightLastDigit === 2 || weightLastDigit === 7) {\n      weightRounded -= 2;\n    } else if (weightLastDigit === 3 || weightLastDigit === 8) {\n      weightRounded += 2;\n    } else if (weightLastDigit === 4 || weightLastDigit === 9) {\n      weightRounded += 1;\n    }\n  }\n  return weightRounded;\n}\n\nexport function getRoundedWeightKg(weight) {\n  const roundedToOneDecimal = getKgWithDecimal(weight);\n\n  let weightRounded = roundedToOneDecimal;\n  const conv = String(roundedToOneDecimal).split(\"\");\n  const weightLastDigit = Number(conv[conv.length - 1]);\n\n  const thereIsNoReminder = roundedToOneDecimal % 1 === 0;\n  if (thereIsNoReminder) return roundedToOneDecimal;\n\n  if (weightLastDigit !== 0 || weightLastDigit !== 5) {\n    if (weightLastDigit === 1 || weightLastDigit === 6) {\n      weightRounded -= 0.1;\n    } else if (weightLastDigit === 2 || weightLastDigit === 7) {\n      weightRounded -= 0.2;\n    } else if (weightLastDigit === 3 || weightLastDigit === 8) {\n      weightRounded += 0.2;\n    } else if (weightLastDigit === 4 || weightLastDigit === 9) {\n      weightRounded += 0.1;\n    }\n  }\n  return weightRounded;\n}\n\nexport function getKgWithDecimal(weight) {\n  return Number((weight * 0.453592).toFixed(1));\n}\n\nexport function getOneRMByUnit(units, weight) {\n  return units === \"lbs\" ? weight : getKgWithDecimal(weight);\n}\n\nconst lookupTable = {\n  10: [\n    null,\n    1,\n    0.955,\n    0.922,\n    0.892,\n    0.863,\n    0.837,\n    0.811,\n    0.786,\n    0.762,\n    0.739,\n    0.707,\n    0.68\n  ],\n  9.5: [\n    null,\n    0.978,\n    0.939,\n    0.907,\n    0.878,\n    0.85,\n    0.824,\n    0.799,\n    0.774,\n    0.751,\n    0.723,\n    0.694,\n    0.667\n  ],\n  9: [\n    null,\n    0.955,\n    0.922,\n    0.892,\n    0.863,\n    0.837,\n    0.811,\n    0.786,\n    0.762,\n    0.739,\n    0.707,\n    0.68,\n    0.653\n  ],\n  8.5: [\n    null,\n    0.939,\n    0.907,\n    0.878,\n    0.85,\n    0.824,\n    0.799,\n    0.774,\n    0.751,\n    0.723,\n    0.694,\n    0.667,\n    0.64\n  ],\n  8: [\n    null,\n    0.922,\n    0.892,\n    0.863,\n    0.837,\n    0.811,\n    0.786,\n    0.762,\n    0.739,\n    0.707,\n    0.68,\n    0.653,\n    0.626\n  ],\n  7.5: [\n    null,\n    0.907,\n    0.878,\n    0.85,\n    0.824,\n    0.799,\n    0.774,\n    0.751,\n    0.723,\n    0.694,\n    0.667,\n    0.64,\n    0.613\n  ],\n  7: [\n    null,\n    0.892,\n    0.863,\n    0.837,\n    0.811,\n    0.786,\n    0.762,\n    0.739,\n    0.707,\n    0.68,\n    0.653,\n    0.626,\n    0.599\n  ],\n  6.5: [\n    null,\n    0.878,\n    0.85,\n    0.824,\n    0.799,\n    0.774,\n    0.751,\n    0.723,\n    0.694,\n    0.667,\n    0.64,\n    0.613,\n    0.586\n  ]\n  // 6: [\n  //   null,\n  //   0.863,\n  //   0.837,\n  //   0.811,\n  //   0.786,\n  //   0.762,\n  //   0.739,\n  //   0.707,\n  //   0.68,\n  //   0.653,\n  //   0.626,\n  //   0.599,\n  //   0.599,\n  //   0.572\n  // ]\n};\n"]},"metadata":{},"sourceType":"module"}