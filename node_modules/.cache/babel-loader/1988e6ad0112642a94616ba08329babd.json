{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { DrawerContent, DrawerOverlay, DrawerTransition } from \"./components\";\n/**\n * Mapping the maxWidth tokens in `theme.sizes` to the size prop.\n */\n\nvar drawerSizes = {\n  xs: \"xs\",\n  sm: \"md\",\n  md: \"lg\",\n  lg: \"2xl\",\n  xl: \"4xl\",\n  full: \"100vw\"\n};\n\nvar Drawer = function Drawer(_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? \"md\" : _ref$size,\n      isFullHeight = _ref.isFullHeight,\n      initialFocusRef = _ref.initialFocusRef,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? \"right\" : _ref$placement,\n      overlayBg = _ref.overlayBg,\n      zIndex = _ref.zIndex,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isOpen\", \"onClose\", \"children\", \"size\", \"isFullHeight\", \"initialFocusRef\", \"placement\", \"overlayBg\", \"zIndex\"]);\n\n  var maxWidth = size in drawerSizes ? drawerSizes[size] : size;\n  return jsx(DrawerTransition, {\n    isOpen: isOpen,\n    placement: placement,\n    isFullHeight: isFullHeight\n  }, function (_ref2) {\n    var reactSpringStyles = _ref2.reactSpringStyles,\n        transformStyle = _ref2.transformStyle,\n        placementStyle = _ref2.placementStyle;\n    return jsx(DrawerOverlay, {\n      initialFocusRef: initialFocusRef,\n      onDismiss: onClose,\n      bg: overlayBg,\n      zIndex: zIndex,\n      opacity: reactSpringStyles.opacity\n    }, jsx(DrawerContent, _extends({\n      position: \"fixed\",\n      transform: transformStyle,\n      maxWidth: maxWidth\n    }, placementStyle, rest), children));\n  });\n};\n\nexport default Drawer;\nexport * from \"./components\";","map":null,"metadata":{},"sourceType":"module"}