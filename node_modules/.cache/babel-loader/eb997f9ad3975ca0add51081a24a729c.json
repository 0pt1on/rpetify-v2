{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport Portal from \"@reach/portal\";\nimport { cloneElement, Fragment, useEffect, useRef } from \"react\";\nimport { Manager, Popper, Reference } from \"react-popper\";\nimport Box from \"../Box\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport useDisclosure from \"../useDisclosure\";\nimport { assignRef } from \"../utils\";\nimport FocusLock from \"react-focus-lock\";\nimport { PopoverCloseButton, PopoverContent, PopoverTransition } from \"./components\";\n\nvar Popover = function Popover(_ref) {\n  var controlledIsOpen = _ref.isOpen,\n      defaultIsOpen = _ref.defaultIsOpen,\n      _ref$maxWidth = _ref.maxWidth,\n      maxWidth = _ref$maxWidth === void 0 ? \"xs\" : _ref$maxWidth,\n      trigger = _ref.trigger,\n      gutter = _ref.gutter,\n      placement = _ref.placement,\n      children = _ref.children,\n      showArrow = _ref.showArrow,\n      showCloseButton = _ref.showCloseButton,\n      _ref$usePortal = _ref.usePortal,\n      usePortal = _ref$usePortal === void 0 ? true : _ref$usePortal,\n      onOpenChange = _ref.onOpenChange,\n      _ref$trapFocus = _ref.trapFocus,\n      trapFocus = _ref$trapFocus === void 0 ? false : _ref$trapFocus,\n      _ref$closeOnBlur = _ref.closeOnBlur,\n      closeOnBlur = _ref$closeOnBlur === void 0 ? true : _ref$closeOnBlur,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isOpen\", \"defaultIsOpen\", \"maxWidth\", \"trigger\", \"gutter\", \"placement\", \"children\", \"showArrow\", \"showCloseButton\", \"usePortal\", \"onOpenChange\", \"trapFocus\", \"closeOnBlur\", \"closeOnEsc\"]);\n\n  var _useDisclosure = useDisclosure(defaultIsOpen),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onToggle = _useDisclosure.onToggle;\n\n  var triggerRef = useRef();\n  var popperRef = useRef();\n  useEffect(function () {\n    onOpenChange && onOpenChange(isOpen);\n  }, [isOpen, onOpenChange]);\n\n  var handleBlur = function handleBlur(event) {\n    if (!trapFocus && isOpen && popperRef.current && triggerRef.current && !popperRef.current.contains(event.relatedTarget) && !triggerRef.current.contains(event.relatedTarget)) {\n      closeOnBlur && onClose();\n    }\n  };\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _bgColor = colorMode === \"light\" ? \"white\" : \"gray.700\";\n\n  var bg = rest.bg || rest.background || rest.backgroundColor || _bgColor;\n  var popoverId = \"popper-\" + useId();\n  var PopperWrapper = usePortal ? Portal : Fragment;\n  return jsx(Manager, null, jsx(Reference, null, function (_ref2) {\n    var referenceRef = _ref2.ref;\n    return cloneElement(trigger, {\n      \"aria-haspopup\": \"true\",\n      \"aria-controls\": popoverId,\n      ref: function ref(node) {\n        triggerRef.current = node;\n        assignRef(referenceRef, node);\n      },\n      onClick: function onClick(event) {\n        onToggle();\n        trigger.props.onClick && trigger.props.onClick(event);\n      }\n    });\n  }), jsx(PopperWrapper, null, jsx(Popper, {\n    placement: placement\n  }, function (_ref3) {\n    var _ref4 = _ref3.ref,\n        popperStyle = _ref3.style,\n        placement = _ref3.placement,\n        arrowProps = _ref3.arrowProps;\n    return jsx(PopoverTransition, {\n      duration: 100,\n      isOpen: isOpen\n    }, function (styles) {\n      return jsx(FocusLock // eslint-disable-next-line jsx-a11y/no-autofocus\n      , {\n        autoFocus: false,\n        returnFocus: true\n      }, jsx(PopoverContent, _extends({\n        ref: function ref(node) {\n          popperRef.current = node;\n          assignRef(_ref4, node);\n        },\n        bg: bg,\n        maxWidth: maxWidth,\n        \"data-placement\": placement,\n        id: popoverId,\n        \"aria-hidden\": isOpen\n      }, rest, {\n        tabIndex: \"-1\",\n        onBlur: handleBlur,\n        css: _objectSpread({}, popperStyle, {\n          transform: popperStyle.transform + \" scale(\" + styles.scale + \")\",\n          opacity: styles.opacity\n        }),\n        onKeyDown: function onKeyDown(event) {\n          event.stopPropagation();\n\n          if (event.key === \"Escape\" && closeOnEsc) {\n            onClose && onClose();\n          }\n        }\n      }), showCloseButton && jsx(PopoverCloseButton, {\n        onClick: onClose\n      }), typeof children === \"function\" ? children({\n        isOpen: isOpen,\n        onClose: onClose\n      }) : children, showArrow && jsx(Box, {\n        borderColor: bg,\n        \"data-arrow\": \"\",\n        ref: arrowProps.ref,\n        css: arrowProps.style\n      })));\n    });\n  })));\n};\n\nexport default Popover;\nexport * from \"./components\";","map":null,"metadata":{},"sourceType":"module"}