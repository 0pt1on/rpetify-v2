import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import { jsx } from "@emotion/core";
import { ModalTransition } from "../Modal/components";
import { AlertDialogContent, AlertDialogOverlay } from "./components";

var AlertDialog = function AlertDialog(_ref) {
  var isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "md" : _ref$size,
      overlayBg = _ref.overlayBg,
      zIndex = _ref.zIndex,
      isCentered = _ref.isCentered,
      leastDestructiveRef = _ref.leastDestructiveRef,
      rest = _objectWithoutPropertiesLoose(_ref, ["isOpen", "onClose", "children", "size", "overlayBg", "zIndex", "isCentered", "leastDestructiveRef"]);

  return jsx(ModalTransition, {
    isOpen: isOpen
  }, function (styles) {
    return jsx(AlertDialogOverlay, {
      bg: overlayBg,
      zIndex: zIndex,
      leastDestructiveRef: leastDestructiveRef,
      css: _objectSpread({
        opacity: styles.opacity
      }, isCentered && {
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }),
      onDismiss: onClose
    }, jsx(AlertDialogContent, _extends({
      maxWidth: size,
      rounded: "md",
      transform: "translate3d(0px, " + styles.y + "px, 0px)"
    }, !isCentered && {
      top: 40,
      mx: "auto"
    }, rest), children));
  });
};

export default AlertDialog;
export * from "./components";