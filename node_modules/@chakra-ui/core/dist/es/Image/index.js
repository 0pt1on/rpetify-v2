import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/** @jsx jsx */
import { jsx } from "@emotion/core";
import { useEffect, useState } from "react";
import Box from "../Box";
export var useHasImageLoaded = function useHasImageLoaded(_ref) {
  var src = _ref.src,
      onLoad = _ref.onLoad,
      onError = _ref.onError;

  var _useState = useState(false),
      hasLoaded = _useState[0],
      setHasLoaded = _useState[1];

  useEffect(function () {
    var image = new Image();
    image.src = src;

    var removeEventListeners = function removeEventListeners() {
      image.removeEventListener("load", loadListener);
      image.removeEventListener("error", errorListener);
    };

    var loadListener = function loadListener() {
      removeEventListeners();
      setHasLoaded(true);
      onLoad && onLoad();
    };

    var errorListener = function errorListener(err) {
      removeEventListeners();
      setHasLoaded(false);
      onError && onError(err);
    };

    image.addEventListener("load", loadListener);
    image.addEventListener("error", errorListener);
    return function () {
      if (hasLoaded) {
        return;
      }

      image.src = "";
    };
  }, [hasLoaded, src, onLoad, onError]);
  return hasLoaded;
};

var Img = function Img(_ref2) {
  var src = _ref2.src,
      onLoad = _ref2.onLoad,
      onError = _ref2.onError,
      fallbackSrc = _ref2.fallbackSrc,
      alt = _ref2.alt,
      props = _objectWithoutPropertiesLoose(_ref2, ["src", "onLoad", "onError", "fallbackSrc", "alt"]);

  var hasLoaded = useHasImageLoaded({
    src: src,
    onLoad: onLoad,
    onError: onError
  });
  return jsx(Box, _extends({
    as: "img",
    src: hasLoaded ? src : fallbackSrc
  }, props));
};

export default Img;