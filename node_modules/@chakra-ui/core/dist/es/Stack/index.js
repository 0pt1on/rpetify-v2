import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/** @jsx jsx */
import { jsx } from "@emotion/core";
import { Children, cloneElement } from "react";
import Flex from "../Flex";
import Box from "../Box";

var Stack = function Stack(_ref) {
  var isInline = _ref.isInline,
      children = _ref.children,
      align = _ref.align,
      justify = _ref.justify,
      _ref$spacing = _ref.spacing,
      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,
      shouldWrapChildren = _ref.shouldWrapChildren,
      rest = _objectWithoutPropertiesLoose(_ref, ["isInline", "children", "align", "justify", "spacing", "shouldWrapChildren"]);

  return jsx(Flex, _extends({
    align: align,
    justify: justify,
    flexDir: isInline ? "row" : "column"
  }, rest), Children.map(children, function (child, index) {
    var isLastChild = children.length === index + 1;
    var spacingProps = isInline ? {
      mr: isLastChild ? null : spacing
    } : {
      mb: isLastChild ? null : spacing
    };

    if (shouldWrapChildren) {
      return jsx(Box, _extends({
        d: "inline-block"
      }, spacingProps), child);
    }

    return cloneElement(child, spacingProps);
  }));
};

export default Stack;