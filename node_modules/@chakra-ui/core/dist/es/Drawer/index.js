import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/** @jsx jsx */
import { jsx } from "@emotion/core";
import { DrawerContent, DrawerOverlay, DrawerTransition } from "./components";
/**
 * Mapping the maxWidth tokens in `theme.sizes` to the size prop.
 */

var drawerSizes = {
  xs: "xs",
  sm: "md",
  md: "lg",
  lg: "2xl",
  xl: "4xl",
  full: "100vw"
};

var Drawer = function Drawer(_ref) {
  var isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "md" : _ref$size,
      isFullHeight = _ref.isFullHeight,
      initialFocusRef = _ref.initialFocusRef,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? "right" : _ref$placement,
      overlayBg = _ref.overlayBg,
      zIndex = _ref.zIndex,
      rest = _objectWithoutPropertiesLoose(_ref, ["isOpen", "onClose", "children", "size", "isFullHeight", "initialFocusRef", "placement", "overlayBg", "zIndex"]);

  var maxWidth = size in drawerSizes ? drawerSizes[size] : size;
  return jsx(DrawerTransition, {
    isOpen: isOpen,
    placement: placement,
    isFullHeight: isFullHeight
  }, function (_ref2) {
    var reactSpringStyles = _ref2.reactSpringStyles,
        transformStyle = _ref2.transformStyle,
        placementStyle = _ref2.placementStyle;
    return jsx(DrawerOverlay, {
      initialFocusRef: initialFocusRef,
      onDismiss: onClose,
      bg: overlayBg,
      zIndex: zIndex,
      opacity: reactSpringStyles.opacity
    }, jsx(DrawerContent, _extends({
      position: "fixed",
      transform: transformStyle,
      maxWidth: maxWidth
    }, placementStyle, rest), children));
  });
};

export default Drawer;
export * from "./components";