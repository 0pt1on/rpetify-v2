"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
var _exportNames = {};
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _core = require("@emotion/core");

var _components = require("./components");

Object.keys(_components).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _components[key];
});

/** @jsx jsx */

/**
 * Mapping the maxWidth tokens in `theme.sizes` to the size prop.
 */
var drawerSizes = {
  xs: "xs",
  sm: "md",
  md: "lg",
  lg: "2xl",
  xl: "4xl",
  full: "100vw"
};

var Drawer = function Drawer(_ref) {
  var isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "md" : _ref$size,
      isFullHeight = _ref.isFullHeight,
      initialFocusRef = _ref.initialFocusRef,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? "right" : _ref$placement,
      overlayBg = _ref.overlayBg,
      zIndex = _ref.zIndex,
      rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref, ["isOpen", "onClose", "children", "size", "isFullHeight", "initialFocusRef", "placement", "overlayBg", "zIndex"]);
  var maxWidth = size in drawerSizes ? drawerSizes[size] : size;
  return (0, _core.jsx)(_components.DrawerTransition, {
    isOpen: isOpen,
    placement: placement,
    isFullHeight: isFullHeight
  }, function (_ref2) {
    var reactSpringStyles = _ref2.reactSpringStyles,
        transformStyle = _ref2.transformStyle,
        placementStyle = _ref2.placementStyle;
    return (0, _core.jsx)(_components.DrawerOverlay, {
      initialFocusRef: initialFocusRef,
      onDismiss: onClose,
      bg: overlayBg,
      zIndex: zIndex,
      opacity: reactSpringStyles.opacity
    }, (0, _core.jsx)(_components.DrawerContent, (0, _extends2["default"])({
      position: "fixed",
      transform: transformStyle,
      maxWidth: maxWidth
    }, placementStyle, rest), children));
  });
};

var _default = Drawer;
exports["default"] = _default;