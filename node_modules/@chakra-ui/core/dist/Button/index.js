"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _core = require("@emotion/core");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _Icon = _interopRequireDefault(require("../Icon"));

var _Spinner = _interopRequireDefault(require("../Spinner"));

var _styles = _interopRequireDefault(require("./styles"));

var _PseudoBox = _interopRequireDefault(require("../PseudoBox"));

var _Box = _interopRequireDefault(require("../Box"));

/** @jsx jsx */
var ButtonIcon = function ButtonIcon(_ref) {
  var icon = _ref.icon,
      props = (0, _objectWithoutPropertiesLoose2["default"])(_ref, ["icon"]);

  if (typeof icon === "string") {
    return (0, _core.jsx)(_Icon["default"], (0, _extends2["default"])({
      focusable: "false",
      name: icon,
      color: "currentColor"
    }, props));
  }

  return (0, _core.jsx)(_Box["default"], (0, _extends2["default"])({
    as: icon,
    "data-custom-icon": true,
    focusable: "false",
    color: "currentColor"
  }, props));
};

var Button = (0, _react.forwardRef)(function (_ref2, ref) {
  var isDisabled = _ref2.isDisabled,
      isLoading = _ref2.isLoading,
      isActive = _ref2.isActive,
      isFullWidth = _ref2.isFullWidth,
      children = _ref2.children,
      Comp = _ref2.as,
      variantColor = _ref2.variantColor,
      leftIcon = _ref2.leftIcon,
      rightIcon = _ref2.rightIcon,
      variant = _ref2.variant,
      loadingText = _ref2.loadingText,
      iconSpacing = _ref2.iconSpacing,
      type = _ref2.type,
      size = _ref2.size,
      colorMode = _ref2.colorMode,
      rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["isDisabled", "isLoading", "isActive", "isFullWidth", "children", "as", "variantColor", "leftIcon", "rightIcon", "variant", "loadingText", "iconSpacing", "type", "size", "colorMode"]);
  var buttonStyleProps = (0, _styles["default"])({
    color: variantColor,
    variant: variant,
    size: size,
    colorMode: colorMode
  });

  var _isDisabled = isDisabled || isLoading;

  return (0, _core.jsx)(_PseudoBox["default"], (0, _extends2["default"])({
    disabled: _isDisabled,
    "aria-disabled": _isDisabled,
    ref: ref,
    as: Comp,
    type: type,
    borderRadius: "md",
    fontWeight: "semibold",
    width: isFullWidth ? "full" : undefined,
    "data-active": isActive ? "true" : undefined
  }, buttonStyleProps, rest), leftIcon && !isLoading && (0, _core.jsx)(ButtonIcon, {
    ml: -1,
    mr: iconSpacing,
    icon: leftIcon
  }), isLoading && (0, _core.jsx)(_Spinner["default"], {
    position: loadingText ? "relative" : "absolute",
    mr: loadingText ? iconSpacing : 0,
    color: "currentColor",
    size: "1em"
  }), isLoading ? loadingText || (0, _core.jsx)(_Box["default"], {
    as: "span",
    opacity: "0"
  }, children) : children, rightIcon && !isLoading && (0, _core.jsx)(ButtonIcon, {
    mr: -1,
    ml: iconSpacing,
    icon: rightIcon
  }));
});
Button.defaultProps = {
  variantColor: "gray",
  variant: "solid",
  size: "md",
  type: "button",
  iconSpacing: 2,
  as: "button"
};
process.env.NODE_ENV !== "production" ? Button.propTypes = {
  /**
   * The color of the button. Use the colors passed in `theme.colors`.
   */
  variantColor: _propTypes["default"].string,

  /**
   * The variant of the button style to use.
   */
  variant: _propTypes["default"].oneOf(["outline", "ghost", "unstyled", "link", "solid"]),

  /**
   * If `true`, the button will be disabled.
   */
  isDisabled: _propTypes["default"].bool,

  /**
   * If `true`, the button will show a spinner.
   */
  isLoading: _propTypes["default"].bool,

  /**
   * The label to show in the button when `isLoading` is true
   * If no text is passed, it only shows the spinner
   */
  loadingText: _propTypes["default"].string,

  /**
   * If `true`, the button will take up the full width of its container.
   */
  isFullWidth: _propTypes["default"].bool,

  /**
   * The html button type to use.
   */
  type: _propTypes["default"].oneOf(["button", "reset", "submit"]),

  /**
   * The size of the button. Use the sizes in `theme.sizes.button`
   */
  size: _propTypes["default"].oneOf(["xs", "sm", "md", "lg"]),

  /**
   * The content of the button.
   */
  children: _propTypes["default"].node.isRequired,

  /**
   * If added, the button will show an icon before the button's label.
   * Use the icon key in `theme.icons`
   */
  leftIcon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func, _propTypes["default"].object]),

  /**
   * If added, the button will show an icon after the button's label.
   * Use the icon key in `theme.icons`
   */
  rightIcon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func, _propTypes["default"].object]),

  /**
   * The space between the button icon and label.
   */
  iconSpacing: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
} : void 0;
var _default = Button;
exports["default"] = _default;