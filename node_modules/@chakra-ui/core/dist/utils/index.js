"use strict";

exports.__esModule = true;
exports.genId = genId;
exports.getFocusables = getFocusables;
exports.getColorInTheme = exports.mergeRefs = exports.assignRef = exports.makeId = void 0;

function genId(prefix) {
  return prefix + "-" + Math.random().toString(32).substr(2, 8);
}

var makeId = function makeId(id, index) {
  return id + ":" + index;
};

exports.makeId = makeId;

var assignRef = function assignRef(ref, value) {
  if (ref == null) return;

  if (typeof ref === "function") {
    ref(value);
  } else {
    try {
      ref.current = value;
    } catch (error) {
      throw new Error("Cannot assign value \"" + value + "\" to ref \"" + ref + "\"");
    }
  }
};

exports.assignRef = assignRef;

var mergeRefs = function mergeRefs(refs, value) {
  refs.forEach(function (ref) {
    return assignRef(ref, value);
  });
};

exports.mergeRefs = mergeRefs;
var focusableElList = ["a[href]", "area[href]", "button:not([disabled])", "embed", "iframe", "input:not([disabled])", "object", "select:not([disabled])", "textarea:not([disabled])", "*[tabindex]:not([aria-disabled])", "*[contenteditable]"];
var focusableElSelector = focusableElList.join();

function getFocusables(element, keyboardOnly) {
  if (keyboardOnly === void 0) {
    keyboardOnly = false;
  }

  var focusableEls = Array.from(element.querySelectorAll(focusableElSelector)); // filter out elements with display: none

  focusableEls = focusableEls.filter(function (focusableEl) {
    return window.getComputedStyle(focusableEl).display !== "none";
  });

  if (keyboardOnly === true) {
    focusableEls = focusableEls.filter(function (focusableEl) {
      return focusableEl.getAttribute("tabindex") !== "-1";
    });
  }

  return focusableEls;
} /// Evaluate color in theme object


var colorKeyInTheme = function colorKeyInTheme(theme, color) {
  return color in theme.colors;
};

var colorHueValue = function colorHueValue(theme, color) {
  var hasDot = color.search(".") !== -1;

  if (hasDot) {
    var _color$split = color.split("."),
        colorName = _color$split[0],
        hue = _color$split[1];

    if (colorKeyInTheme(theme, colorName)) {
      return theme.colors[colorName][hue];
    }
  }

  return null;
};

var getColorInTheme = function getColorInTheme(theme, color) {
  if (colorKeyInTheme(theme, color)) {
    return theme.colors[color][500];
  }

  if (colorHueValue(theme, color)) {
    return colorHueValue(theme, color);
  }

  return color;
};

exports.getColorInTheme = getColorInTheme;