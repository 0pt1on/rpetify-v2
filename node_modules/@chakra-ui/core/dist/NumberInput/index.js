"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _Flex = _interopRequireDefault(require("../Flex"));

var _Input = _interopRequireDefault(require("../Input"));

var _Spinner = _interopRequireDefault(require("./Spinner"));

function useLongPress(callback, speed) {
  if (callback === void 0) {
    callback = function callback() {};
  }

  if (speed === void 0) {
    speed = 200;
  }

  var _useState = (0, _react.useState)(false),
      startLongPress = _useState[0],
      setStartLongPress = _useState[1];

  (0, _react.useEffect)(function () {
    var timerId;

    if (startLongPress) {
      timerId = setTimeout(callback, speed);
    } else {
      clearTimeout(timerId);
    }

    return function () {
      clearTimeout(timerId);
    };
  }, [startLongPress, callback, speed]);
  var start = (0, _react.useCallback)(function () {
    setStartLongPress(true);
  }, []);
  var stop = (0, _react.useCallback)(function () {
    setStartLongPress(false);
  }, []);
  return {
    start: start,
    stop: stop
  };
}

var NumberInput = (0, _react.forwardRef)(function (_ref2, ref) {
  var size = _ref2.size,
      form = _ref2.form,
      pattern = _ref2.pattern,
      name = _ref2.name,
      placeholder = _ref2.placeholder,
      onBlur = _ref2.onBlur,
      onChange = _ref2.onChange,
      onKeyDown = _ref2.onKeyDown,
      onKeyUp = _ref2.onKeyUp,
      onKeyPress = _ref2.onKeyPress,
      onFocus = _ref2.onFocus,
      id = _ref2.id,
      autoFocus = _ref2.autoFocus,
      variant = _ref2.variant,
      ariaLabel = _ref2["aria-label"],
      ariaDescribedby = _ref2["aria-describedby"],
      ariaLabelledby = _ref2["aria-labelledby"],
      min = _ref2.min,
      max = _ref2.max,
      _ref2$step = _ref2.step,
      step = _ref2$step === void 0 ? 1 : _ref2$step,
      defaultValue = _ref2.defaultValue,
      valueProp = _ref2.value,
      isReadOnly = _ref2.isReadOnly,
      isFullWidth = _ref2.isFullWidth,
      isDisabled = _ref2.isDisabled,
      isInvalid = _ref2.isInvalid,
      isRequired = _ref2.isRequired,
      focusBorderColor = _ref2.focusBorderColor,
      inputProps = _ref2.inputProps,
      _ref2$focusOnUpDown = _ref2.focusOnUpDown,
      focusOnUpDown = _ref2$focusOnUpDown === void 0 ? true : _ref2$focusOnUpDown,
      rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["size", "form", "pattern", "name", "placeholder", "onBlur", "onChange", "onKeyDown", "onKeyUp", "onKeyPress", "onFocus", "id", "autoFocus", "variant", "aria-label", "aria-describedby", "aria-labelledby", "min", "max", "step", "defaultValue", "value", "isReadOnly", "isFullWidth", "isDisabled", "isInvalid", "isRequired", "focusBorderColor", "inputProps", "focusOnUpDown"]);

  var _useState2 = (0, _react.useState)(defaultValue || 0),
      val = _useState2[0],
      setVal = _useState2[1];

  var _useRef = (0, _react.useRef)(valueProp != null),
      isControlled = _useRef.current;

  var _value = isControlled ? valueProp : val;

  var isEditable = !isReadOnly && !isDisabled;
  var ownRef = (0, _react.useRef)();

  var _ref = ref || ownRef;

  var clampValue = function clampValue(nextVal) {
    var output = nextVal;

    if (nextVal > max) {
      output = nextVal;
    }

    if (nextVal < min) {
      output = min;
    }

    return output;
  };

  var focusInput = function focusInput() {
    if (focusOnUpDown && _ref.current) {
      _ref.current.focus();
    }
  };

  var updateValue = function updateValue(value) {
    !isControlled && setVal(value);
    onChange && onChange(value);
  };

  var handleIncrement = function handleIncrement(unitStep) {
    if (unitStep === void 0) {
      unitStep = step;
    }

    var nextValue = Math.round((_value + unitStep) * 1e12) / 1e12;
    nextValue = clampValue(nextValue);
    var maxExists = max != null;

    if (!maxExists || maxExists && max >= nextValue) {
      updateValue(nextValue);
    }

    focusInput();
  };

  var handleDecrement = function handleDecrement(unitStep) {
    if (unitStep === void 0) {
      unitStep = step;
    }

    var nextValue = Math.round((_value - unitStep) * 1e12) / 1e12;
    nextValue = clampValue(nextValue);
    var minExists = min != null;

    if (!minExists || minExists && min <= nextValue) {
      updateValue(nextValue);
    }

    focusInput();
  };

  var handleChange = function handleChange(event) {
    var nextValue = Number(event.target.value);
    updateValue(nextValue);
  };

  var getIncrementFactor = function getIncrementFactor(event) {
    var ratio = 1;

    if (event.metaKey || event.ctrlKey) {
      ratio = 0.1;
    }

    if (event.shiftKey) {
      ratio = 10;
    }

    return ratio;
  };

  var handleKeyDown = function handleKeyDown(event) {
    if (!isEditable) {
      return;
    }

    if (event.key === "ArrowUp") {
      event.preventDefault();
      var ratio = getIncrementFactor(event);
      handleIncrement(ratio * step);
    }

    if (event.key === "ArrowDown") {
      event.preventDefault();

      var _ratio = getIncrementFactor(event);

      handleDecrement(_ratio * step);
    }

    if (onKeyDown) {
      onKeyDown(event);
    }
  };

  var iconSize = size === "sm" ? "11px" : "15px";
  var increment = useLongPress(handleIncrement);
  var decrement = useLongPress(handleDecrement);
  return _react["default"].createElement(_Flex["default"], (0, _extends2["default"])({
    align: "stretch",
    w: isFullWidth ? "full" : null,
    pos: "relative"
  }, rest), _react["default"].createElement(_Input["default"], (0, _extends2["default"])({
    ref: _ref,
    size: size,
    type: "number",
    role: "spinbutton",
    "aria-valuemin": min,
    "aria-valuemax": max,
    "aria-valuenow": _value,
    onChange: handleChange,
    value: _value,
    onKeyDown: handleKeyDown
  }, {
    form: form,
    pattern: pattern,
    min: min,
    placeholder: placeholder,
    onKeyUp: onKeyUp,
    onKeyPress: onKeyPress,
    onFocus: onFocus,
    onBlur: onBlur,
    autoFocus: autoFocus,
    max: max,
    step: step,
    isDisabled: isDisabled,
    isInvalid: isInvalid,
    isRequired: isRequired,
    name: name,
    id: id,
    isReadOnly: isReadOnly,
    focusBorderColor: focusBorderColor,
    variant: variant,
    "aria-label": ariaLabel,
    "aria-describedby": ariaDescribedby
  }, inputProps)), _react["default"].createElement(_Spinner["default"], {
    incrementProps: {
      onMouseDown: increment.start,
      onMouseUp: increment.stop,
      onMouseLeave: increment.stop,
      onTouchStart: increment.start,
      onTouchEnd: increment.stop,
      onClick: function onClick() {
        return handleIncrement();
      },
      isDisabled: !isEditable
    },
    decrementProps: {
      onMouseDown: decrement.start,
      onMouseUp: decrement.stop,
      onMouseLeave: decrement.stop,
      onTouchStart: decrement.start,
      onTouchEnd: decrement.stop,
      onClick: function onClick() {
        return handleDecrement();
      },
      isDisabled: !isEditable
    },
    iconSize: iconSize
  }));
});
var _default = NumberInput;
exports["default"] = _default;